<p>В mzz генерация и валидация форм разделены. Стандартные правила валидации располагаются в каталоге <i>system/forms/validators</i>. Для валидации формы вначале нужно подключить класс валидатора форм и создать объект этого класса. Это делается так:</p>
<<code php>>
fileLoader::load('forms/validators/formValidator');
$validator = new formValidator();
<</code>>
<p>Единственным аргументом для конструктора класса <code>formValidator</code> является имя поля, свидетельствующего о том, что форма отправлена. По умолчанию используется значение <code>submit</code>. Для добавления правила валидации формы используется следующий синтаксис:</p>
<<code php>>
    $validator->add('имя валидатора', 'имя поля', 'сообщение об ошибке', 'дополнительные параметры');
<</code>>
<p>В базовый набор валидаторов входят следующие:</p>
<ul>
    <li>
        <i>required</i> - данный валидатор означает, что поле формы обязательно должно быть заполнено. Пример использования:
        <<code php>>
            $validator->add('required', 'title', 'Необходимо назвать новость');
        <</code>>
    </li>
    <li>
        <i>numeric</i> - обязывает поле формы быть числовым.
    </li>
    <li>
        <i>regex</i> - валидатор, позволяющий в качестве критерия для валидации использовать регулярное выражение. При этом регулярное выражение передаётся в массиве дополнительных параметров. Пример:
        <<code php>>
            $validator->add('regex', 'name', 'Недопустимые символы в идентификаторе', '/^[a-zа-я0-9_\.\-! ]+$/i');
        <</code>>
    </li>
    <li>
        <i>uploaded</i> - этот валидатор проверяет, что указанное поле - является полем типа <i>file</i>, а также что файл был загружен на сервер без ошибок.
    </li>
    <li>
        <i>callback</i> - валидатор, использующий для валидации callback-функцию. Имя этой функции, а также другие дополнительные аргументы передаются в массиве дополнительных параметров. В случае, если callback-функция возвращает значение <i>true</i> - считается, что валидация прошла успешно, поле заполнено без ошибок. Примеры использования этого валидатора:
        <!-- php code 1 -->
        <!-- php code 2 -->
        <<note>>
            В примере, исключительно в демонстрационных целях, приведён примитивный вариант регулярного выражения проверки корректности электронного адреса. В реальных проектах вы можете использовать более достоверные способы проверки.
        <</note>>
        <<note>>
            Отправленное из формы значение всегда будет передаваться в callback-функцию и всегда будет идти первым аргументом.
        <</note>>
    </li>
</ul>