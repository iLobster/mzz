
ОРМ в мзз предназначен для упрощения работы с данными в БД. Стандартные классы, входящие в ОРМ обладают минимально необходимым функционалом - CRUD (Create, Retrieve, Update, Delete).
ОРМ построен на базе The Data Mapper Pattern (http://wiki.agiledev.ru/doku.php?id=ooad:dp:data_mapper). Вкратце: в контектсте этого паттерна мы оперируем двумя терминами - маппер и доменный объект (ДО). Упрощённо: доменный объект - контейнер для данных, маппер - класс для заполнения ДО данными.Все действия по модификации также осуществляются через маппер.
ДО лежат в корневом каталоге каждого модуля, мапперы - в подкаталоге mappers.
Для функционирования The Data Mapper Pattern также нужен файл map - в котором находится схема (описание структуры) данных. Файлы map располагаются в подкаталоге maps каталога модуля. В этом файле описаны имена полей, которые есть в таблице, которую отражает ДО, имена акцессоров и мутаторов, а также некоторая другая информация. Структура данного файла выглядит так:

[Имя поля]
accessor = "имя акцессора"
mutator = "имя мутатора"
...
<другие опции>

О назначении акцессора и мутатора вы можете узнать, прочитав статью по ссылке выше.
Возможные дополнительные опции:

        once
        Если данная опция установлена в "true", то это поле может быть установлено лишь 1 раз. Пользователем при создании объекта, либо маппером - при создании объекта по запросу пользователя. Примеры использования: устанавливается для Primary Key (например: id).
        
        owns
        Используется для создания отношений 1:1.
        Синтаксис:
        owns = "имя_объекта.поле"
        Пример:
        [related_id]
        accessor = "getRelated"
        mutator = "setRelated"
        owns = "related.id"
        В приведённом примере текущая таблица (а соответственно и объект) связана отношением 1:1 с таблицей related. Связь осуществляется между полем related_id текущей таблицы и полем id таблицы related.
        В полученном согласно этой схеме ДО данные в свойстве related_id (получаемое с помощью мутатора getRelated), будет являться инстанцией класса related с нужными данными.
        Пример клиентского кода:
        $DO->getRelated()->getId()
        Вышеприведённый пример вернёт id присоединяемого объекта.
        
        has
        Опция, аналогичная owns, с тем лишь различием, что в текущей таблице для связи используется другое поле, например Primary Key.
        Пример:
        [related_id]
        accessor = "getRelated"
        mutator = "setRelated"
        has = "id->related2.relate_id"
        
        В этом примере related2.relate_id несут ту же смысловую нагрузку что и для опции owns, а id (после которого должен следовать знак ->) - обозначает имя поля, по которому происходит связывание
        
        Пример клиентского кода абсолютно аналогичен примеру из owns.
        
        section
        Данное свойство используется совместно с owns и has для того, чтобы указать, в контексте какой секции должен создаваться присоединяемый ДО.
        Это можно использовать например в случае, когда у вас список пользователей находится в таблице user_user, таблица с новостями - news_news. В таблице news поле editor определяет последнего исправлявшего новость. Текущая секция - news. Для этой ситуации файл map для ДО news может выглядеть следующим образом:
        [editor]
        accessor = "getEditor"
        mutator = "setEditor"
        owns = "user.id"
        section = "user"
        Пример клиентского кода:
        
        $news->getEditor()->getLogin();
        Пример вернёт имя последнего исправлявшего новость.