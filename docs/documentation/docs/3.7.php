<p>ОРМ в мзз предназначен для упрощения работы с данными в БД. Стандартные классы, входящие в ОРМ обладают минимально необходимым функционалом - CRUD (Create, Retrieve, Update, Delete).<br />
ОРМ построен на базе The Data Mapper Pattern (http://wiki.agiledev.ru/doku.php?id=ooad:dp:data_mapper). Вкратце: в контектсте этого паттерна мы оперируем двумя терминами - маппер и доменный объект (ДО). Упрощённо: доменный объект - контейнер для данных, маппер - класс для заполнения ДО данными.Все действия по модификации также осуществляются через маппер.</p>
<p>Также отметим, что ДО является отображением данных приложения и данных в БД (в пределах 1 сеанса). Из этого следует, что до тех пор, пока объект не был сохранён специальным методом маппера, он будет выдавать "старые" данные (именно те, которые сейчас находятся в БД). Проиллюстрирую это на примере:</p>
<!-- code 3 -->
<p>ДО лежат в корневом каталоге каждого модуля, мапперы - в подкаталоге mappers.<br />
Для функционирования The Data Mapper Pattern также нужен файл map - в котором находится схема (описание структуры) данных. Файлы map располагаются в подкаталоге maps каталога модуля. В этом файле описаны имена полей, которые есть в таблице, которую отражает ДО, имена акцессоров и мутаторов, а также некоторая другая информация. Структура данного файла выглядит так:<br />
<div class="code"><code>
        [Имя поля]<br />
        accessor = "имя акцессора"<br />
        mutator = "имя мутатора"<br />
        ...<br />
        &lt;другие опции&gt;
</code></div>
<p>О назначении акцессора и мутатора вы можете узнать, прочитав статью по ссылке выше.</p>
<p>Возможные дополнительные опции:</p>
<ul>
        <li>
                <i>once</i> - eсли данная опция установлена в "true", то это поле может быть установлено лишь 1 раз. Пользователем при создании объекта, либо маппером - при создании объекта по запросу пользователя. Примеры использования: устанавливается для Primary Key (например: id).<br />
        </li>
        <li>
                <i>owns</i> - используется для создания отношений 1:1.<br />
                Синтаксис:
                <div class="code"><code>
                        owns = "имя_объекта.поле"
                </code></div>
                Пример:
                <div class="code"><code>
                        [related_id]<br />
                        accessor = "getRelated"<br />
                        mutator = "setRelated"<br />
                        owns = "related.id"
                </code></div>
                В приведённом примере текущая таблица (а соответственно и объект) связана отношением 1:1 с таблицей related. Связь осуществляется между полем related_id текущей таблицы и полем id таблицы related.<br />
                В полученном согласно этой схеме ДО данные в свойстве related_id (получаемое с помощью мутатора getRelated), будет являться инстанцией класса related с нужными данными.<br />
                Пример клиентского кода:
                <!-- code 1 -->
                Вышеприведённый пример вернёт id присоединяемого объекта.<br />
        </li>
        <li>
                has - опция, аналогичная owns, с тем лишь различием, что в текущей таблице для связи используется другое поле, например Primary Key.<br />
                Пример:
                <div class="code"><code>
                        [related_id]<br />
                        accessor = "getRelated"<br />
                        mutator = "setRelated"<br />
                        has = "id->related2.relate_id"
                </code></div>
                В этом примере related2.relate_id несут ту же смысловую нагрузку что и для опции owns, а id (после которого должен следовать знак ->) - обозначает имя поля, по которому происходит связывание<br />
                <br />
                Пример клиентского кода абсолютно аналогичен примеру из owns.<br />
        </li>
        <li>
                section - данное свойство используется совместно с owns и has для того, чтобы указать, в контексте какой секции должен создаваться присоединяемый ДО.<br />
                Это можно использовать например в случае, когда у вас список пользователей находится в таблице user_user, таблица с новостями - news_news. В таблице news поле editor определяет последнего исправлявшего новость. Текущая секция - news. Для этой ситуации файл map для ДО news может выглядеть следующим образом:
                <div class="code"><code>
                        [editor]<br />
                        accessor = "getEditor"<br />
                        mutator = "setEditor"<br />
                        owns = "user.id"<br />
                        section = "user"
                </code></div>
                Пример клиентского кода:
                <!-- code 2 -->
                Пример вернёт имя последнего исправлявшего новость.
        </li>
</ul>