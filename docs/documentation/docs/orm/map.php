<p>Свойство маппера <em>$map</em> представляет собой набор правил наложения данных БД на объектную модель. Вот несколько упрощенный пример map:</p>

<<code php>>
protected $map = array(
    'id' => array(
        'accessor' => 'getId',
        'mutator' => 'setId',
        'options' => array(
            'pk', 'once',
        )
    ),
    'title' => array(
        'accessor' => 'getTitle',
        'mutator' => 'setTitle'
    )
)
<</code>>

<p>Ключами массива <em>$map</em> являются имена полей таблицы БД (которая задается в параметре <em>$table</em> маппера, ссылка). В общем случае у каждого поля должно быть описано имена двух методов — accessor и mutator.</p>

<p>Имя accessor'а имеет префикс "get" и используется для получения данных, которые хранятся в данном поле.</p>

<p>Mutator, соответственно, имеет префикс "set" и используется для сохранения данных в DO.</p>

<p>У каждого поля может содержаться любое количество дополнительных параметров в ключе 'options'. Приведем примеры нескольких опций:</p>
<ul>
    <li>pk — присутствие такой опции будет говорить о том, что данное поле является Первичным Ключом (Primary Key) для таблицы.
    <li>once — поля с этой опцией будут доступны для сохранения только один раз при создании объекта. При попытке задать такое поле вторично, будет сгенерировано исключение
    <li>ro — поле доступно только для чтения. При попытке задать значения через соответствующий мутатор, будет сгенерировано исключение.
</ul>


<p>Основные методы для работы с мапперами:</p>

<ul>
    <li><em>create()</em> - создание объекта.
    <li><em>save($object)</em> - сохранение объекта $object.
    <li><em>delete($id)</em> - удаление объекта, в качестве идентификатора используется первичный ключ $id или сам объект.
</ul>

<p>Также для удобства имеется ряд методов для получения записей:</p>

<ul>
    <li><em>searchByKeys($id)</em> - поиск объектов по первичным ключам. В качестве аргумента передаётся массив.
    <li><em>searchOneByField($field, $value)</em> - поиск объекта по полю $field со значением $value.
    <li><em>searchAllByField($field, $value)</em> - поиск объектов по полю $field со значение $value.
    <li><em>searchOneByCriteria(criteria $criteria)</em> - поиск объекта по критерию.
    <li><em>searchAllByCriteria(criteria $criteria)</em> - поиск объектов по критерию.
    <li><em>searchAll($orderCriteria = null)</em> - выборка всех объектов. В качестве аргумента может быть передан критерий для сортировки.
</ul>

<p>Естественно, что в ваших мапперах вы можете расширить данный список методов для поиска. Так например метод searchByLogin (метод для поиска пользователя по его логину) будет выглядеть следующим образом:</p>

<<code php>>
class userMapper extends simpleMapper
{
    [...]
    /**
     * Выполняет поиск объекта по логину
     *
     * @param string $login логин
     * @return object
     */
    public function searchByLogin($login)
    {
        return $this->searchOneByField('login', $login);
    }
}
<</code>>

<<alert>>Экранировать значения, передаваемые в аргументах, не нужно. За вас это сделает генератор запросов.<</alert>>
<<note>>О работе с критериями можно узнать в <a href="packages.db.html">соответствующем разделе</a>.<</note>>