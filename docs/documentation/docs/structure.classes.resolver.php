<p>Резолверы предназначены для упрощения процесса подключения файлов. Резолверы возвращают полный путь к файлу (если он существует), часть которого передана в качестве единственного аргумента в методе resolve().
Например:
</p>
<!-- php code 1 -->
<p>Композитный резолвер позволяет создавать сложные (композитные) резолверы. Этот резолвер реализует поведение паттерна Chain of Responsibility. В случае композитного резолвера, запрос будет передан по цепочке резолверов, пока он не будет обработан кем-либо из резолверов или не закончится цепочка. Это позволяет реализовать поиск необходимых файлов в разных каталогах, либо когда в случае отсутствия (наличия) одного файла - нужно вернуть другой.<br />
Пример создания и использования композитного резолвера:
</p>
<!-- php code 2 -->
<p>В этом примере файл <i>file.php</i> будет сначала передан в $resolver1. Если $resolver1 не сможет отрезолвить запрос, тогда запрос будет передан в $resolver2.
</p>
<p>В приложениях, однако, обращаться напрямую к резолверам вам не придётся. Специально для непосредственной загрузки файлов предназначена обёртка для резолвера - <i>fileLoader</i>. В самом начале загрузки приложения составляется композитный резолвер, который будет резолвить все запросы поиска файлов. Затем этот резолвер передаётся в fileLoader, и затем при каждом запросе fileLoader::load, запрос будет делегироваться этому резолверу. Отметим также, что набор резолверов по умолчанию сделан таким образом, что для "подмены" любого оригинального файла из mzz, вам необходимо создать файл с таким же именем в каталоге www вашего проекта. (Например для подмены файла system/modules/news/controllers/newsSaveController.php, который отвечает за процесс отрисовки и обработки формы создания и редактирования новости - создайте файл www/modules/news/controllers/newsSaveController.php). Для вашего проекта это произойдёт прозрачно - никаких путей изменять не надо, за вас это сделают резолверы.
<<note>>Не забудьте удалить файл resolver.cache, располагающийся в каталоге tmp вашего проекта, иначе будет использован кэш и может возвращаться неактуальная информация.<</note>>
<br />
Пример создания резолвера и загрузки файлов с его помощью:
</p>
<!-- php code 3 -->
<<note>>FileLoader работает аналогично управляющей структуре php require_once. Иными словами - средствами fileLoader'а каждый файл может быть загружен только 1 раз.<</note>>