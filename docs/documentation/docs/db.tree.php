Для хранения древовидных структур используется класс dbTreeNS. Этот класс обеспечивает работу с деревьями по технологии Nested Sets.<br />
В работе используется 2 таблицы, назовем их условно - <strong>tree</strong> и <strong>data</strong>.<br />

<ul>
        <li><p>
                <em>tree</em> - таблица используется для хранения структуры <br />
                Структура и описание таблицы:
                <<code>>
                        id - идентификатор записи, связан с полем tree.id <br />
                        foo - хранимое значение<br />
                        path - путь до записи в дереве.
                <<note>>
                Для связи с таблицей содержащей структуру, возможно заведение отдельного поля. <br />
                Но учитывая 1:1 отношение между записями таблицы данных и структурной таблицей рациональнее использовать праймари ключи таблиц для связи.
                <</note>>
                <</code>>

            </p>
        </li>
        <li><p>
                <em>data</em> - в таблице хранятся данные.
                Структура и описание таблицы:
                <<code>>
                        id - идентификатор записи <br />
                        lkey - левый ключ <br />
                        rkey - правый ключ <br />
                        level - уровень нахождения записи в дереве, root - первый уровень <br />
                <</code>>
            </p>
        </li>
</ul>

Рассмотрим основные методы класса для работы со структурой дерева и возможные варианты применения на примере следущего дерева:
<pre>

                                   <<c1>>1<</c1>>
                                 <<c2>>1<</c2>>[<<c3>>1<</c3>>]<<c4>>16<</c4>>
                                   |
                            ----------------
                            |      |       |
                            <<c1>>2<</c1>>      <<c1>>3<</c1>>       <<c1>>4<</c1>>
                          <<c2>>2<</c2>>[<<c3>>2<</c3>>]<<c4>>7<</c4>>  <<c2>>8<</c2>>[<<c3>>2<</c3>>]<<c4>>13<</c4>> <<c2>>14<</c2>>[<<c3>>2<</c3>>]<<c4>>15<</c4>>
                            |      |
                      -------      ---------
                      |     |      |       |
                      <<c1>>5<</c1>>     <<c1>>6<</c1>>      <<c1>>7<</c1>>       <<c1>>8<</c1>>
                    <<c2>>3<</c2>>[<<c3>>3<</c3>>]<<c4>>4<</c4>> <<c2>>5<</c2>>[<<c3>>3<</c3>>]<<c4>>6<</c4>>  <<c2>>9<</c2>>[<<c3>>3<</c3>>]<<c4>>10<</c4>> <<c2>>11<</c2>>[<<c3>>3<</c3>>]<<c4>>12<</c4>>


                                   <<c1>>id<</c1>>
                             <<c2>>lkey<</c2>>[<<c3>>level<</c3>>]<<c4>>rkey<</c4>>
</pre>

<ul>
        <li><p>
                <strong>getTree($level = 0)</strong> - выборка узлов дерева до определенной глубины<br />
                Допустим вам необходимо выбрать два уровня дерева. Как пример, выборка первых двух уровней каталога для построения вложенного меню.<br />
                <<code>>
                $dbTreeNS->getTree(2);
                <</code>>
                даст нам следующее дерево:
<pre>

                                   <<c1>>1<</c1>>
                                 <<c2>>1<</c2>>[<<c3>>1<</c3>>]<<c4>>16<</c4>>
                                   |
                            ----------------
                            |      |       |
                            <<c1>>2<</c1>>      <<c1>>3<</c1>>       <<c1>>4<</c1>>
                          <<c2>>2<</c2>>[<<c3>>2<</c3>>]<<c4>>7<</c4>>  <<c2>>8<</c2>>[<<c3>>2<</c3>>]<<c4>>13<</c4>> <<c2>>14<</c2>>[<<c3>>2<</c3>>]<<c4>>15<</c4>>
</pre>

            </p>
        </li>
</ul>




