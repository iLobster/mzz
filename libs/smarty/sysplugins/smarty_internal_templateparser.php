<?php
/**
* Smarty Internal Plugin Templateparser
*
* This is the template parser.
* It is generated from the internal.templateparser.y file
* @package Smarty
* @subpackage Compiler
* @author Uwe Tews
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class TP_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof TP_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof TP_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->_string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof TP_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof TP_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 12 "smarty_internal_templateparser.y"
class Smarty_Internal_Templateparser#line 109 "smarty_internal_templateparser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 14 "smarty_internal_templateparser.y"

    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    private $lex;
    private $internalError = false;

    function __construct($lex, $compiler) {
        // set instance object
        self::instance($this); 
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        if ($this->template->security && isset($this->smarty->security_handler)) {
              $this->sec_obj = $this->smarty->security_policy;
        } else {
              $this->sec_obj = $this->smarty;
        }
        $this->cacher = $this->template->cacher_object; 
        $this->compiler->has_variable_string = false;
				$this->compiler->prefix_code = array();
				$this->prefix_number = 0;
    }
    public static function &instance($new_instance = null)
    {
        static $instance = null;
        if (isset($new_instance) && is_object($new_instance))
            $instance = $new_instance;
        return $instance;
    }
    
#line 147 "smarty_internal_templateparser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const TP_COMMENT                        =  1;
    const TP_PHP                            =  2;
    const TP_OTHER                          =  3;
    const TP_SHORTTAGEND                    =  4;
    const TP_SHORTTAGSTART                  =  5;
    const TP_XML                            =  6;
    const TP_LDEL                           =  7;
    const TP_RDEL                           =  8;
    const TP_EQUAL                          =  9;
    const TP_ID                             = 10;
    const TP_PTR                            = 11;
    const TP_SPACE                          = 12;
    const TP_SEMICOLON                      = 13;
    const TP_DOLLAR                         = 14;
    const TP_INCDEC                         = 15;
    const TP_AS                             = 16;
    const TP_LDELSLASH                      = 17;
    const TP_COMMA                          = 18;
    const TP_COLON                          = 19;
    const TP_UNIMATH                        = 20;
    const TP_OPENP                          = 21;
    const TP_CLOSEP                         = 22;
    const TP_QMARK                          = 23;
    const TP_MATH                           = 24;
    const TP_ANDSYM                         = 25;
    const TP_TYPECAST                       = 26;
    const TP_INTEGER                        = 27;
    const TP_DOT                            = 28;
    const TP_BOOLEAN                        = 29;
    const TP_NULL                           = 30;
    const TP_SINGLEQUOTESTRING              = 31;
    const TP_QUOTE                          = 32;
    const TP_DOUBLECOLON                    = 33;
    const TP_AT                             = 34;
    const TP_HATCH                          = 35;
    const TP_OPENB                          = 36;
    const TP_CLOSEB                         = 37;
    const TP_VERT                           = 38;
    const TP_NOT                            = 39;
    const TP_ISIN                           = 40;
    const TP_ISDIVBY                        = 41;
    const TP_ISNOTDIVBY                     = 42;
    const TP_ISEVEN                         = 43;
    const TP_ISNOTEVEN                      = 44;
    const TP_ISEVENBY                       = 45;
    const TP_ISNOTEVENBY                    = 46;
    const TP_ISODD                          = 47;
    const TP_ISNOTODD                       = 48;
    const TP_ISODDBY                        = 49;
    const TP_ISNOTODDBY                     = 50;
    const TP_INSTANCEOF                     = 51;
    const TP_EQUALS                         = 52;
    const TP_NOTEQUALS                      = 53;
    const TP_GREATERTHAN                    = 54;
    const TP_LESSTHAN                       = 55;
    const TP_GREATEREQUAL                   = 56;
    const TP_LESSEQUAL                      = 57;
    const TP_IDENTITY                       = 58;
    const TP_NONEIDENTITY                   = 59;
    const TP_MOD                            = 60;
    const TP_LAND                           = 61;
    const TP_LOR                            = 62;
    const TP_LXOR                           = 63;
    const TP_APTR                           = 64;
    const TP_BACKTICK                       = 65;
    const TP_DOLLARID                       = 66;
    const YY_NO_ACTION = 478;
    const YY_ACCEPT_ACTION = 477;
    const YY_ERROR_ACTION = 476;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 1362;
static public $yy_action = array(
 /*     0 */    21,   32,  204,  161,  211,  168,  148,   69,  285,  177,
 /*    10 */   187,  166,    1,   40,    3,   32,  113,   31,  211,   51,
 /*    20 */   171,   20,  237,  244,  299,   46,  103,   21,   47,   13,
 /*    30 */   152,  210,    8,  111,   76,   19,  162,  187,  162,  243,
 /*    40 */    40,   33,  199,  242,  238,  187,   51,  171,  109,  237,
 /*    50 */   244,  299,   46,  112,  213,   47,   13,  212,   21,  243,
 /*    60 */   200,  151,  266,  242,  238,   72,  348,   14,  187,  283,
 /*    70 */   348,   40,    3,  192,   63,  267,  202,   51,  171,   20,
 /*    80 */   237,  244,  299,   46,   20,   21,   47,   13,  161,  218,
 /*    90 */     8,  111,   69,   53,  215,  187,  111,  165,   40,   33,
 /*   100 */   477,   62,  203,  256,   51,  171,  173,  237,  244,  299,
 /*   110 */    46,  216,   21,   47,   13,   45,  138,   28,   22,   69,
 /*   120 */   101,  141,  187,  197,   76,   40,   12,   76,  274,  124,
 /*   130 */   220,   51,  171,  147,  237,  244,  299,   46,  162,   14,
 /*   140 */    47,   13,  243,  266,  162,   47,  242,  238,   47,    6,
 /*   150 */     5,  271,  272,    4,    2,  273,  279,    7,    9,  189,
 /*   160 */   257,  174,  251,  250,  183,  249,   21,  254,  284,  280,
 /*   170 */   287,  288,   32,  150,   31,  211,  187,   80,    6,    5,
 /*   180 */   271,  272,    4,    2,  273,  279,    7,    9,   32,   55,
 /*   190 */    34,  211,  289,  225,  255,  256,  217,  233,  280,  287,
 /*   200 */   288,    6,    5,  271,  272,    4,    2,  273,  279,    7,
 /*   210 */     9,    6,    5,  271,  272,    4,    2,  273,  279,    7,
 /*   220 */     9,  280,  287,  288,  210,   35,  214,   21,   19,   26,
 /*   230 */   156,  280,  287,  288,   76,  147,   32,  187,  187,  211,
 /*   240 */    40,   33,   32,  207,  162,  211,   51,  171,  162,  237,
 /*   250 */   244,  299,   46,  222,   21,   47,   13,  159,  344,   20,
 /*   260 */    23,   76,  192,  199,  187,  260,  181,   40,   33,  184,
 /*   270 */   192,  111,   58,   51,  171,  201,  237,  244,  299,   46,
 /*   280 */   170,   21,   47,   13,  153,  300,   53,  215,   69,  192,
 /*   290 */    44,  187,  260,  296,   40,   33,  162,  192,   36,  110,
 /*   300 */    51,  171,  216,  237,  244,  299,   46,  192,   21,   47,
 /*   310 */    13,  161,  120,   20,   38,   69,  261,  269,  187,  136,
 /*   320 */    80,   40,   12,  162,  128,  111,  266,   51,  171,  239,
 /*   330 */   237,  244,  299,   46,  147,   21,   47,   13,  159,  267,
 /*   340 */   233,  164,   76,   32,  180,  187,  211,  140,   80,   33,
 /*   350 */   247,  241,  246,   27,   51,  171,   24,  237,  244,  299,
 /*   360 */    46,  259,  229,   47,   13,  192,   80,   16,  233,  162,
 /*   370 */     6,    5,  271,  272,    4,    2,  273,  279,    7,    9,
 /*   380 */    43,  162,   43,  286,  252,  104,  233,  192,  192,  144,
 /*   390 */   280,  287,  288,  295,  195,   29,   61,   44,   80,  266,
 /*   400 */   105,   82,  176,  158,  145,   36,   21,  157,  191,  154,
 /*   410 */   100,  193,  245,   76,  266,   80,  187,  346,  233,  213,
 /*   420 */    33,  346,  162,  270,   32,   51,  171,  178,  237,  244,
 /*   430 */   299,   46,  196,   21,   47,  233,  159,  126,  292,  127,
 /*   440 */    76,  147,  192,  187,  246,  169,  119,   33,  162,  267,
 /*   450 */    39,  266,   51,  171,  205,  237,  244,  299,   46,  274,
 /*   460 */   266,   47,  303,  304,  305,  226,  291,  290,  276,  277,
 /*   470 */   278,  262,  297,  267,  125,  162,  192,   39,  146,  293,
 /*   480 */    41,  281,  294,  192,  149,  192,  192,   38,  266,  303,
 /*   490 */   304,  305,  226,  291,  290,  276,  277,  278,  295,  195,
 /*   500 */   265,   61,   18,   80,  192,  282,   88,  209,   15,  192,
 /*   510 */    43,  123,  198,  298,  162,  100,  122,  245,   76,  295,
 /*   520 */   195,  308,   61,  233,   80,  266,  135,   92,  270,   52,
 /*   530 */   266,  246,  118,  198,  298,   68,  100,  192,  245,   47,
 /*   540 */   295,  195,  175,   61,  233,   80,  266,  131,   90,  270,
 /*   550 */   240,  182,  246,   98,  198,  298,  133,  100,   64,  245,
 /*   560 */    57,  295,  195,  162,   61,  233,   80,  185,  240,   86,
 /*   570 */   270,  208,  268,  240,   37,  198,  298,  232,  100,  224,
 /*   580 */   245,   76,  188,  236,  295,  195,  233,   61,  221,   80,
 /*   590 */   302,  270,   89,   30,  194,   73,  231,  227,  198,  298,
 /*   600 */    65,  100,   47,  245,   16,  295,  195,   77,   59,  233,
 /*   610 */    80,  253,  235,   83,  270,  240,   48,  234,   97,  198,
 /*   620 */   298,   96,  100,   41,  245,  311,  295,  195,  167,   61,
 /*   630 */   233,   80,  248,  240,   93,  270,  240,   70,   25,  228,
 /*   640 */   198,  298,   71,  100,  247,  245,  163,  295,  195,  179,
 /*   650 */    61,  233,   80,  260,  223,   87,  270,  216,  258,  108,
 /*   660 */   192,  198,  298,   42,  100,   81,  245,   74,   10,   11,
 /*   670 */   295,  195,  233,   60,   49,   80,   17,  270,   84,  273,
 /*   680 */   273,  219,  273,  273,  198,  298,  273,  100,  273,  245,
 /*   690 */   273,  295,  195,  273,   61,  233,   80,  273,  273,   85,
 /*   700 */   270,  273,  273,  273,  273,  198,  298,  273,  100,  273,
 /*   710 */   245,  273,  295,  195,  273,  116,  233,   80,  273,  273,
 /*   720 */   273,  270,  273,  273,  273,  273,  264,  298,  273,  100,
 /*   730 */   273,  245,  273,  162,  273,   39,  273,  233,  273,  273,
 /*   740 */   273,  273,  273,  273,  273,  160,  310,  303,  304,  305,
 /*   750 */   226,  291,  290,  276,  277,  278,  295,  195,  273,   61,
 /*   760 */   273,   80,  273,  273,   91,  273,  273,  273,  273,  273,
 /*   770 */   198,  298,  273,  100,  273,  245,  273,  295,  195,  273,
 /*   780 */   116,  233,   80,  273,  295,  195,  270,   56,   78,   80,
 /*   790 */   273,  264,  298,  273,  100,  273,  245,  273,  264,  298,
 /*   800 */   273,  100,  233,  245,  273,  273,  273,  273,  273,  233,
 /*   810 */   273,  309,  273,  273,  273,  273,  273,  295,  195,  273,
 /*   820 */   130,  206,   80,  273,  295,  195,  273,  102,  273,   80,
 /*   830 */   273,  155,  298,  273,  100,  273,  245,  273,  264,  298,
 /*   840 */   273,  100,  233,  245,  273,  273,  301,  295,   66,  233,
 /*   850 */    50,   79,   75,  273,  295,  195,  273,  102,  273,   80,
 /*   860 */   273,  264,  298,  273,  100,  273,  245,  273,  264,  298,
 /*   870 */   273,  100,  233,  245,  273,  273,  172,  273,  273,  233,
 /*   880 */   273,  295,   67,  273,   54,   79,   75,  273,  273,  295,
 /*   890 */   195,  273,  273,  273,   80,  264,  298,  273,  100,  273,
 /*   900 */   245,  273,  273,  230,  295,  195,  233,  102,  245,   80,
 /*   910 */   273,  273,  273,  273,  233,  273,  273,  273,  264,  298,
 /*   920 */   273,  100,  273,  245,  273,  273,  190,  295,  195,  233,
 /*   930 */   102,  273,   80,  273,  273,  273,  273,  273,  273,  273,
 /*   940 */   273,  264,  298,  273,  100,  273,  245,  273,  273,  186,
 /*   950 */   273,  273,  233,  295,  195,  273,  142,  273,   80,  273,
 /*   960 */   273,  295,  195,  273,  273,  273,   80,  264,  298,  273,
 /*   970 */   100,  273,  245,  273,  273,  263,  295,  195,  233,  107,
 /*   980 */   245,   80,  273,  273,  273,  273,  233,  273,  273,  273,
 /*   990 */   264,  298,  273,  100,  273,  245,  273,  273,  273,  295,
 /*  1000 */   195,  233,  143,  273,   80,  273,  273,  273,  273,  273,
 /*  1010 */   273,  273,  273,  264,  298,  273,  100,  273,  245,  273,
 /*  1020 */   273,  273,  273,  273,  233,  295,  195,  273,  134,  273,
 /*  1030 */    80,  273,  273,  295,  195,  273,  273,  273,   80,  264,
 /*  1040 */   298,  273,  100,  273,  245,  273,  273,  275,  295,  195,
 /*  1050 */   233,  114,  245,   80,  273,  273,  273,  273,  233,  273,
 /*  1060 */   273,  273,  264,  298,  273,  100,  273,  245,  273,  273,
 /*  1070 */   273,  295,  195,  233,  117,  273,   80,  273,  273,  273,
 /*  1080 */   273,  273,  273,  273,  273,  264,  298,  273,  100,  273,
 /*  1090 */   245,  273,  273,  273,  273,  273,  233,  295,  195,  273,
 /*  1100 */   115,  273,   80,  273,  273,  273,  273,  273,  273,  273,
 /*  1110 */   273,  264,  298,  273,  100,  273,  245,  273,  273,  273,
 /*  1120 */   295,  195,  233,  139,  273,   80,  273,  273,  273,  273,
 /*  1130 */   273,  273,  273,  273,  264,  298,  273,  100,  273,  245,
 /*  1140 */   273,  273,  273,  295,  195,  233,  132,  273,   80,  273,
 /*  1150 */   273,  273,  273,  273,  273,  273,  273,  264,  298,  273,
 /*  1160 */   100,  273,  245,  273,  273,  273,  273,  273,  233,  295,
 /*  1170 */   195,  273,  129,  273,   80,  273,  273,  273,  273,  273,
 /*  1180 */   273,  273,  273,  264,  298,  273,  100,  273,  245,  273,
 /*  1190 */   273,  273,  295,  195,  233,  106,  273,   80,  273,  273,
 /*  1200 */   273,  273,  273,  273,  273,  273,  264,  298,  273,  100,
 /*  1210 */   273,  245,  273,  273,  273,  295,  195,  233,  121,  273,
 /*  1220 */    80,  273,  273,  273,  273,  273,  273,  273,  273,  264,
 /*  1230 */   298,  273,  100,  273,  245,  273,  273,  273,  273,  273,
 /*  1240 */   233,  295,  195,  273,  137,  273,   80,  273,  273,  273,
 /*  1250 */   273,  273,  273,  273,  273,  264,  298,  273,  100,  273,
 /*  1260 */   245,  273,  273,  273,  295,  195,  233,  273,  273,   80,
 /*  1270 */   273,  273,  273,  273,  273,  273,  273,  273,  264,  298,
 /*  1280 */   273,   94,  273,  245,  273,  273,  273,  295,  195,  233,
 /*  1290 */   273,  273,   80,  273,  273,  273,  273,  273,  273,  273,
 /*  1300 */   273,  264,  298,  273,   99,  273,  245,  273,  273,  273,
 /*  1310 */   273,  273,  233,  295,  195,  273,  273,  273,   80,  273,
 /*  1320 */   273,  273,  273,  273,  273,  273,  273,  264,  298,  273,
 /*  1330 */    95,  273,  245,  273,  273,  273,  295,  195,  233,  273,
 /*  1340 */   273,   80,  273,  273,  273,  273,  273,  273,  273,  273,
 /*  1350 */   306,  307,  273,  273,  273,  245,  273,  273,  273,  273,
 /*  1360 */   273,  233,
    );
    static public $yy_lookahead = array(
 /*     0 */     7,    7,    8,   10,   10,   10,    8,   14,    8,   14,
 /*    10 */    17,   11,   12,   20,   21,    7,   95,    9,   10,   26,
 /*    20 */    27,   21,   29,   30,   31,   32,   95,    7,   35,   36,
 /*    30 */    10,    3,   39,   33,   14,    7,   38,   17,   38,   20,
 /*    40 */    20,   21,   34,   24,   25,   17,   26,   27,   73,   29,
 /*    50 */    30,   31,   32,   95,   71,   35,   36,   37,    7,   20,
 /*    60 */    32,   10,   87,   24,   25,   14,    8,    9,   17,    8,
 /*    70 */    12,   20,   21,   12,   91,  100,   37,   26,   27,   21,
 /*    80 */    29,   30,   31,   32,   21,    7,   35,   36,   10,  106,
 /*    90 */    39,   33,   14,   65,   66,   17,   33,   84,   20,   21,
 /*   100 */    68,   69,   70,   71,   26,   27,   10,   29,   30,   31,
 /*   110 */    32,   98,    7,   35,   36,   10,   78,    7,   18,   14,
 /*   120 */    10,   13,   17,   10,   14,   20,   21,   14,   22,   73,
 /*   130 */     8,   26,   27,   77,   29,   30,   31,   32,   38,    9,
 /*   140 */    35,   36,   20,   87,   38,   35,   24,   25,   35,   41,
 /*   150 */    42,   43,   44,   45,   46,   47,   48,   49,   50,   22,
 /*   160 */     1,    2,    3,    4,    5,    6,    7,    4,    8,   61,
 /*   170 */    62,   63,    7,   72,    9,   10,   17,   76,   41,   42,
 /*   180 */    43,   44,   45,   46,   47,   48,   49,   50,    7,   78,
 /*   190 */     9,   10,   22,   92,   70,   71,   15,   96,   61,   62,
 /*   200 */    63,   41,   42,   43,   44,   45,   46,   47,   48,   49,
 /*   210 */    50,   41,   42,   43,   44,   45,   46,   47,   48,   49,
 /*   220 */    50,   61,   62,   63,    3,   19,   65,    7,    7,   19,
 /*   230 */    10,   61,   62,   63,   14,   77,    7,   17,   17,   10,
 /*   240 */    20,   21,    7,    8,   38,   10,   26,   27,   38,   29,
 /*   250 */    30,   31,   32,   32,    7,   35,   36,   10,    8,   21,
 /*   260 */   102,   14,   12,   34,   17,   15,   28,   20,   21,   11,
 /*   270 */    12,   33,   78,   26,   27,   37,   29,   30,   31,   32,
 /*   280 */    10,    7,   35,   36,   10,    8,   65,   66,   14,   12,
 /*   290 */    28,   17,   15,    8,   20,   21,   38,   12,   36,   95,
 /*   300 */    26,   27,   98,   29,   30,   31,   32,   12,    7,   35,
 /*   310 */    36,   10,   73,   21,   19,   14,   72,   10,   17,   13,
 /*   320 */    76,   20,   21,   38,   18,   33,   87,   26,   27,   10,
 /*   330 */    29,   30,   31,   32,   77,    7,   35,   36,   10,  100,
 /*   340 */    96,   34,   14,    7,   72,   17,   10,   94,   76,   21,
 /*   350 */    97,    8,   99,    7,   26,   27,   64,   29,   30,   31,
 /*   360 */    32,    8,   72,   35,   36,   12,   76,   21,   96,   38,
 /*   370 */    41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
 /*   380 */    11,   38,   11,    8,    8,   73,   96,   12,   12,   77,
 /*   390 */    61,   62,   63,   71,   72,   64,   74,   28,   76,   87,
 /*   400 */    73,   79,   80,   81,   77,   36,    7,   85,   86,   10,
 /*   410 */    88,   72,   90,   14,   87,   76,   17,    8,   96,   71,
 /*   420 */    21,   12,   38,  101,    7,   26,   27,   10,   29,   30,
 /*   430 */    31,   32,   22,    7,   35,   96,   10,   73,    8,   94,
 /*   440 */    14,   77,   12,   17,   99,   16,   73,   21,   38,  100,
 /*   450 */    40,   87,   26,   27,  106,   29,   30,   31,   32,   22,
 /*   460 */    87,   35,   52,   53,   54,   55,   56,   57,   58,   59,
 /*   470 */    60,   99,    8,  100,   73,   38,   12,   40,   77,    8,
 /*   480 */    51,    8,    8,   12,    8,   12,   12,   19,   87,   52,
 /*   490 */    53,   54,   55,   56,   57,   58,   59,   60,   71,   72,
 /*   500 */     8,   74,   18,   76,   12,    8,   79,   12,    9,   12,
 /*   510 */    11,   73,   85,   86,   38,   88,   73,   90,   14,   71,
 /*   520 */    72,   37,   74,   96,   76,   87,   94,   79,  101,   78,
 /*   530 */    87,   99,   73,   85,   86,   83,   88,   12,   90,   35,
 /*   540 */    71,   72,   82,   74,   96,   76,   87,   94,   79,  101,
 /*   550 */    98,   19,   99,   83,   85,   86,   10,   88,   83,   90,
 /*   560 */    10,   71,   72,   38,   74,   96,   76,   10,   98,   79,
 /*   570 */   101,    8,   10,   98,    7,   85,   86,   10,   88,   37,
 /*   580 */    90,   14,   16,   27,   71,   72,   96,   74,    8,   76,
 /*   590 */    22,  101,   79,   23,   27,   14,   29,   30,   85,   86,
 /*   600 */    83,   88,   35,   90,   21,   71,   72,   22,   74,   96,
 /*   610 */    76,    4,   35,   79,  101,   98,   10,   35,   83,   85,
 /*   620 */    86,   83,   88,   51,   90,    8,   71,   72,   28,   74,
 /*   630 */    96,   76,   10,   98,   79,  101,   98,   14,   23,   10,
 /*   640 */    85,   86,   14,   88,   97,   90,    3,   71,   72,    3,
 /*   650 */    74,   96,   76,   15,   22,   79,  101,   98,   87,   95,
 /*   660 */    12,   85,   86,   89,   88,   92,   90,   14,  103,   82,
 /*   670 */    71,   72,   96,   74,   95,   76,   21,  101,   79,  107,
 /*   680 */   107,   80,  107,  107,   85,   86,  107,   88,  107,   90,
 /*   690 */   107,   71,   72,  107,   74,   96,   76,  107,  107,   79,
 /*   700 */   101,  107,  107,  107,  107,   85,   86,  107,   88,  107,
 /*   710 */    90,  107,   71,   72,  107,   74,   96,   76,  107,  107,
 /*   720 */   107,  101,  107,  107,  107,  107,   85,   86,  107,   88,
 /*   730 */   107,   90,  107,   38,  107,   40,  107,   96,  107,  107,
 /*   740 */   107,  107,  107,  107,  107,  104,  105,   52,   53,   54,
 /*   750 */    55,   56,   57,   58,   59,   60,   71,   72,  107,   74,
 /*   760 */   107,   76,  107,  107,   79,  107,  107,  107,  107,  107,
 /*   770 */    85,   86,  107,   88,  107,   90,  107,   71,   72,  107,
 /*   780 */    74,   96,   76,  107,   71,   72,  101,   74,   75,   76,
 /*   790 */   107,   85,   86,  107,   88,  107,   90,  107,   85,   86,
 /*   800 */   107,   88,   96,   90,  107,  107,  107,  107,  107,   96,
 /*   810 */   107,  105,  107,  107,  107,  107,  107,   71,   72,  107,
 /*   820 */    74,   75,   76,  107,   71,   72,  107,   74,  107,   76,
 /*   830 */   107,   85,   86,  107,   88,  107,   90,  107,   85,   86,
 /*   840 */   107,   88,   96,   90,  107,  107,   93,   71,   72,   96,
 /*   850 */    74,   75,   76,  107,   71,   72,  107,   74,  107,   76,
 /*   860 */   107,   85,   86,  107,   88,  107,   90,  107,   85,   86,
 /*   870 */   107,   88,   96,   90,  107,  107,   93,  107,  107,   96,
 /*   880 */   107,   71,   72,  107,   74,   75,   76,  107,  107,   71,
 /*   890 */    72,  107,  107,  107,   76,   85,   86,  107,   88,  107,
 /*   900 */    90,  107,  107,   85,   71,   72,   96,   74,   90,   76,
 /*   910 */   107,  107,  107,  107,   96,  107,  107,  107,   85,   86,
 /*   920 */   107,   88,  107,   90,  107,  107,   93,   71,   72,   96,
 /*   930 */    74,  107,   76,  107,  107,  107,  107,  107,  107,  107,
 /*   940 */   107,   85,   86,  107,   88,  107,   90,  107,  107,   93,
 /*   950 */   107,  107,   96,   71,   72,  107,   74,  107,   76,  107,
 /*   960 */   107,   71,   72,  107,  107,  107,   76,   85,   86,  107,
 /*   970 */    88,  107,   90,  107,  107,   85,   71,   72,   96,   74,
 /*   980 */    90,   76,  107,  107,  107,  107,   96,  107,  107,  107,
 /*   990 */    85,   86,  107,   88,  107,   90,  107,  107,  107,   71,
 /*  1000 */    72,   96,   74,  107,   76,  107,  107,  107,  107,  107,
 /*  1010 */   107,  107,  107,   85,   86,  107,   88,  107,   90,  107,
 /*  1020 */   107,  107,  107,  107,   96,   71,   72,  107,   74,  107,
 /*  1030 */    76,  107,  107,   71,   72,  107,  107,  107,   76,   85,
 /*  1040 */    86,  107,   88,  107,   90,  107,  107,   85,   71,   72,
 /*  1050 */    96,   74,   90,   76,  107,  107,  107,  107,   96,  107,
 /*  1060 */   107,  107,   85,   86,  107,   88,  107,   90,  107,  107,
 /*  1070 */   107,   71,   72,   96,   74,  107,   76,  107,  107,  107,
 /*  1080 */   107,  107,  107,  107,  107,   85,   86,  107,   88,  107,
 /*  1090 */    90,  107,  107,  107,  107,  107,   96,   71,   72,  107,
 /*  1100 */    74,  107,   76,  107,  107,  107,  107,  107,  107,  107,
 /*  1110 */   107,   85,   86,  107,   88,  107,   90,  107,  107,  107,
 /*  1120 */    71,   72,   96,   74,  107,   76,  107,  107,  107,  107,
 /*  1130 */   107,  107,  107,  107,   85,   86,  107,   88,  107,   90,
 /*  1140 */   107,  107,  107,   71,   72,   96,   74,  107,   76,  107,
 /*  1150 */   107,  107,  107,  107,  107,  107,  107,   85,   86,  107,
 /*  1160 */    88,  107,   90,  107,  107,  107,  107,  107,   96,   71,
 /*  1170 */    72,  107,   74,  107,   76,  107,  107,  107,  107,  107,
 /*  1180 */   107,  107,  107,   85,   86,  107,   88,  107,   90,  107,
 /*  1190 */   107,  107,   71,   72,   96,   74,  107,   76,  107,  107,
 /*  1200 */   107,  107,  107,  107,  107,  107,   85,   86,  107,   88,
 /*  1210 */   107,   90,  107,  107,  107,   71,   72,   96,   74,  107,
 /*  1220 */    76,  107,  107,  107,  107,  107,  107,  107,  107,   85,
 /*  1230 */    86,  107,   88,  107,   90,  107,  107,  107,  107,  107,
 /*  1240 */    96,   71,   72,  107,   74,  107,   76,  107,  107,  107,
 /*  1250 */   107,  107,  107,  107,  107,   85,   86,  107,   88,  107,
 /*  1260 */    90,  107,  107,  107,   71,   72,   96,  107,  107,   76,
 /*  1270 */   107,  107,  107,  107,  107,  107,  107,  107,   85,   86,
 /*  1280 */   107,   88,  107,   90,  107,  107,  107,   71,   72,   96,
 /*  1290 */   107,  107,   76,  107,  107,  107,  107,  107,  107,  107,
 /*  1300 */   107,   85,   86,  107,   88,  107,   90,  107,  107,  107,
 /*  1310 */   107,  107,   96,   71,   72,  107,  107,  107,   76,  107,
 /*  1320 */   107,  107,  107,  107,  107,  107,  107,   85,   86,  107,
 /*  1330 */    88,  107,   90,  107,  107,  107,   71,   72,   96,  107,
 /*  1340 */   107,   76,  107,  107,  107,  107,  107,  107,  107,  107,
 /*  1350 */    85,   86,  107,  107,  107,   90,  107,  107,  107,  107,
 /*  1360 */   107,   96,
);
    const YY_SHIFT_USE_DFLT = -8;
    const YY_SHIFT_MAX = 199;
    static public $yy_shift_ofst = array(
 /*     0 */   159,   51,   -7,   -7,   -7,   -7,   -7,   -7,   -7,   -7,
 /*    10 */    -7,   -7,   -7,  274,  301,  301,   78,   78,  274,  105,
 /*    20 */    78,  105,   78,   78,   78,   78,   78,   78,   78,   78,
 /*    30 */    78,   78,   78,   78,   78,   78,   20,  247,  220,  328,
 /*    40 */   426,  399,  426,  110,  567,    0,  221,  113,  258,  369,
 /*    50 */   285,  504,  295,  504,  525,  295,  525,  525,  295,  437,
 /*    60 */   410,  695,  159,   28,  181,    8,  277,  250,  229,  417,
 /*    70 */   336,  336,  417,  336,  336,  499,  336,  371,  648,  648,
 /*    80 */   371,  371,  160,  170,  137,  108,  329,  329,  329,  329,
 /*    90 */   329,  329,  329,  329,   39,  122,   -6,  165,  235,   19,
 /*   100 */    19,  346,  100,  262,  375,  353,  106,  210,  262,   61,
 /*   110 */   262,   -5,  262,  262,   -2,  206,  331,  476,  474,  492,
 /*   120 */   497,  343,  430,  376,  464,  473,  471,  371,  653,  384,
 /*   130 */   384,  371,  384,  655,  384,  371,  495,  384,  468,  384,
 /*   140 */   371,  495,  384,  384,   -8,   -8,   -8,   -8,   -8,   -8,
 /*   150 */    -8,   58,  238,  292,   63,  409,   63,  429,  306,   63,
 /*   160 */   484,   63,  307,  607,  562,  563,  550,  556,  583,  581,
 /*   170 */   580,  600,  585,  542,  646,  623,  617,  546,  532,  163,
 /*   180 */   161,   96,  319,  643,  270,  130,  632,  606,  628,  570,
 /*   190 */   568,  566,  557,  577,  629,  638,  615,  582,  572,  622,
);
    const YY_REDUCE_USE_DFLT = -80;
    const YY_REDUCE_MAX = 150;
    static public $yy_reduce_ofst = array(
 /*     0 */    32,  322,  513,  534,  490,  555,  469,  427,  448,  576,
 /*    10 */   685,  620,  599,  641,  746,  713,  856,  783,  706,  776,
 /*    20 */   833,  810,  753,  954,  928,  905,  882, 1000,  977, 1098,
 /*    30 */  1026, 1170, 1144, 1121, 1072, 1049, 1193, 1242, 1216, 1265,
 /*    40 */   890,  962,  818,  101,  290,  312,  -17,  339,  327,  253,
 /*    50 */    56,  244,  -25,  272,   56,  239,  364,  401,  373,  158,
 /*    60 */   158,  158,  124,  348,   13,  204,  438,  438,  204,  452,
 /*    70 */   475,  470,  517,  538,  535,  432,  452,  345,  459,  443,
 /*    80 */   432,  453,  565,  565,  565,  565,  565,  565,  565,  565,
 /*    90 */   565,  565,  565,  565,  574,  574,  559,  559,  559,  574,
 /*   100 */   574,  564,  257,  547,  571,  571,  257,  257,  547,  571,
 /*   110 */   547,  573,  547,  547,  257,  257,  257,  257,  571,  571,
 /*   120 */   571,  257,  571,  571,  571,  571,  571,  372,  601,  257,
 /*   130 */   257,  372,  257,  579,  257,  372,  587,  257,  349,  257,
 /*   140 */   372,  460,  257,  257,  451,  194,  111,   38,  -69,  -42,
 /*   150 */   -79,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(1, 2, 3, 4, 5, 6, 7, 17, ),
        /* 1 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 2 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 3 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 4 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 5 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 6 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 7 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 8 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 9 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 10 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 11 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 12 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 39, ),
        /* 13 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 14 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 15 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 16 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 17 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 18 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 19 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 20 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 21 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 22 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 23 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 24 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 25 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 26 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 27 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 28 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 29 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 30 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 31 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 32 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 33 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 34 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 35 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 36 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, 37, ),
        /* 37 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 38 */ array(7, 10, 14, 17, 20, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 39 */ array(7, 10, 14, 17, 21, 26, 27, 29, 30, 31, 32, 35, 36, ),
        /* 40 */ array(7, 10, 14, 17, 21, 26, 27, 29, 30, 31, 32, 35, ),
        /* 41 */ array(7, 10, 14, 17, 21, 26, 27, 29, 30, 31, 32, 35, ),
        /* 42 */ array(7, 10, 14, 17, 21, 26, 27, 29, 30, 31, 32, 35, ),
        /* 43 */ array(7, 10, 14, 35, ),
        /* 44 */ array(7, 10, 14, 27, 29, 30, 35, ),
        /* 45 */ array(8, 11, 12, 21, 33, 38, ),
        /* 46 */ array(3, 7, 17, 32, 65, 66, ),
        /* 47 */ array(10, 14, 35, ),
        /* 48 */ array(11, 12, 38, ),
        /* 49 */ array(11, 28, 36, ),
        /* 50 */ array(8, 12, 38, ),
        /* 51 */ array(14, 35, ),
        /* 52 */ array(12, 19, ),
        /* 53 */ array(14, 35, ),
        /* 54 */ array(12, 38, ),
        /* 55 */ array(12, 19, ),
        /* 56 */ array(12, 38, ),
        /* 57 */ array(12, 38, ),
        /* 58 */ array(12, 19, ),
        /* 59 */ array(22, 38, 40, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 60 */ array(22, 38, 40, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 61 */ array(38, 40, 52, 53, 54, 55, 56, 57, 58, 59, 60, ),
        /* 62 */ array(1, 2, 3, 4, 5, 6, 7, 17, ),
        /* 63 */ array(3, 7, 17, 32, 65, 66, ),
        /* 64 */ array(7, 9, 10, 15, ),
        /* 65 */ array(7, 9, 10, 34, ),
        /* 66 */ array(8, 12, 15, ),
        /* 67 */ array(8, 12, 15, ),
        /* 68 */ array(7, 10, 34, ),
        /* 69 */ array(7, 10, ),
        /* 70 */ array(7, 10, ),
        /* 71 */ array(7, 10, ),
        /* 72 */ array(7, 10, ),
        /* 73 */ array(7, 10, ),
        /* 74 */ array(7, 10, ),
        /* 75 */ array(9, 11, ),
        /* 76 */ array(7, 10, ),
        /* 77 */ array(11, ),
        /* 78 */ array(12, ),
        /* 79 */ array(12, ),
        /* 80 */ array(11, ),
        /* 81 */ array(11, ),
        /* 82 */ array(8, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 83 */ array(22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 84 */ array(22, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 85 */ array(13, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 86 */ array(41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 87 */ array(41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 88 */ array(41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 89 */ array(41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 90 */ array(41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 91 */ array(41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 92 */ array(41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 93 */ array(41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 61, 62, 63, ),
        /* 94 */ array(20, 24, 25, 37, ),
        /* 95 */ array(8, 20, 24, 25, ),
        /* 96 */ array(7, 8, 10, ),
        /* 97 */ array(7, 9, 10, ),
        /* 98 */ array(7, 8, 10, ),
        /* 99 */ array(20, 24, 25, ),
        /* 100 */ array(20, 24, 25, ),
        /* 101 */ array(7, 21, ),
        /* 102 */ array(18, 38, ),
        /* 103 */ array(28, 36, ),
        /* 104 */ array(8, 12, ),
        /* 105 */ array(8, 12, ),
        /* 106 */ array(22, 38, ),
        /* 107 */ array(19, 38, ),
        /* 108 */ array(28, 36, ),
        /* 109 */ array(8, 12, ),
        /* 110 */ array(28, 36, ),
        /* 111 */ array(10, 14, ),
        /* 112 */ array(28, 36, ),
        /* 113 */ array(28, 36, ),
        /* 114 */ array(8, 38, ),
        /* 115 */ array(19, 38, ),
        /* 116 */ array(38, 64, ),
        /* 117 */ array(8, 38, ),
        /* 118 */ array(8, 12, ),
        /* 119 */ array(8, 12, ),
        /* 120 */ array(8, 12, ),
        /* 121 */ array(8, 38, ),
        /* 122 */ array(8, 12, ),
        /* 123 */ array(8, 12, ),
        /* 124 */ array(8, 12, ),
        /* 125 */ array(8, 12, ),
        /* 126 */ array(8, 12, ),
        /* 127 */ array(11, ),
        /* 128 */ array(14, ),
        /* 129 */ array(38, ),
        /* 130 */ array(38, ),
        /* 131 */ array(11, ),
        /* 132 */ array(38, ),
        /* 133 */ array(21, ),
        /* 134 */ array(38, ),
        /* 135 */ array(11, ),
        /* 136 */ array(12, ),
        /* 137 */ array(38, ),
        /* 138 */ array(19, ),
        /* 139 */ array(38, ),
        /* 140 */ array(11, ),
        /* 141 */ array(12, ),
        /* 142 */ array(38, ),
        /* 143 */ array(38, ),
        /* 144 */ array(),
        /* 145 */ array(),
        /* 146 */ array(),
        /* 147 */ array(),
        /* 148 */ array(),
        /* 149 */ array(),
        /* 150 */ array(),
        /* 151 */ array(8, 9, 12, 21, 33, ),
        /* 152 */ array(21, 28, 33, 37, ),
        /* 153 */ array(21, 33, 64, ),
        /* 154 */ array(21, 33, ),
        /* 155 */ array(8, 12, ),
        /* 156 */ array(21, 33, ),
        /* 157 */ array(16, 51, ),
        /* 158 */ array(13, 18, ),
        /* 159 */ array(21, 33, ),
        /* 160 */ array(18, 37, ),
        /* 161 */ array(21, 33, ),
        /* 162 */ array(10, 34, ),
        /* 163 */ array(4, ),
        /* 164 */ array(10, ),
        /* 165 */ array(8, ),
        /* 166 */ array(10, ),
        /* 167 */ array(27, ),
        /* 168 */ array(21, ),
        /* 169 */ array(14, ),
        /* 170 */ array(8, ),
        /* 171 */ array(28, ),
        /* 172 */ array(22, ),
        /* 173 */ array(37, ),
        /* 174 */ array(3, ),
        /* 175 */ array(14, ),
        /* 176 */ array(8, ),
        /* 177 */ array(10, ),
        /* 178 */ array(19, ),
        /* 179 */ array(4, ),
        /* 180 */ array(65, ),
        /* 181 */ array(10, ),
        /* 182 */ array(10, ),
        /* 183 */ array(3, ),
        /* 184 */ array(10, ),
        /* 185 */ array(9, ),
        /* 186 */ array(22, ),
        /* 187 */ array(10, ),
        /* 188 */ array(14, ),
        /* 189 */ array(23, ),
        /* 190 */ array(22, ),
        /* 191 */ array(16, ),
        /* 192 */ array(10, ),
        /* 193 */ array(35, ),
        /* 194 */ array(10, ),
        /* 195 */ array(15, ),
        /* 196 */ array(23, ),
        /* 197 */ array(35, ),
        /* 198 */ array(51, ),
        /* 199 */ array(10, ),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
        /* 311 */ array(),
);
    static public $yy_default = array(
 /*     0 */   476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
 /*    10 */   476,  476,  476,  462,  476,  476,  420,  420,  476,  476,
 /*    20 */   420,  476,  420,  476,  476,  476,  476,  476,  476,  476,
 /*    30 */   476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
 /*    40 */   476,  476,  476,  476,  476,  476,  476,  476,  344,  382,
 /*    50 */   476,  476,  344,  476,  344,  344,  344,  344,  344,  430,
 /*    60 */   430,  430,  312,  476,  476,  392,  365,  365,  392,  476,
 /*    70 */   476,  476,  476,  476,  476,  385,  476,  378,  344,  344,
 /*    80 */   385,  377,  476,  476,  476,  476,  439,  444,  443,  440,
 /*    90 */   435,  434,  428,  436,  476,  476,  476,  476,  476,  425,
 /*   100 */   353,  392,  419,  413,  476,  476,  476,  476,  411,  476,
 /*   110 */   390,  476,  414,  412,  476,  476,  465,  476,  476,  476,
 /*   120 */   476,  476,  476,  476,  476,  476,  476,  380,  476,  463,
 /*   130 */   345,  379,  335,  392,  431,  408,  475,  351,  355,  360,
 /*   140 */   383,  475,  361,  464,  424,  424,  424,  424,  392,  392,
 /*   150 */   392,  352,  476,  352,  445,  356,  426,  356,  476,  476,
 /*   160 */   476,  352,  476,  476,  476,  476,  476,  476,  381,  476,
 /*   170 */   476,  368,  476,  476,  476,  476,  349,  476,  406,  476,
 /*   180 */   476,  476,  476,  476,  476,  348,  476,  476,  476,  476,
 /*   190 */   476,  359,  476,  476,  396,  365,  373,  476,  356,  476,
 /*   200 */   375,  400,  402,  313,  337,  466,  347,  338,  334,  474,
 /*   210 */   473,  406,  403,  472,  468,  469,  405,  336,  467,  350,
 /*   220 */   399,  341,  376,  417,  401,  415,  450,  395,  397,  398,
 /*   230 */   358,  394,  393,  387,  388,  389,  369,  370,  364,  354,
 /*   240 */   404,  407,  363,  362,  371,  372,  409,  391,  386,  319,
 /*   250 */   320,  321,  322,  318,  317,  314,  315,  316,  342,  339,
 /*   260 */   367,  366,  410,  357,  356,  340,  343,  423,  421,  422,
 /*   270 */   427,  437,  438,  441,  373,  446,  453,  454,  455,  442,
 /*   280 */   456,  329,  331,  330,  332,  328,  327,  457,  458,  429,
 /*   290 */   452,  451,  324,  325,  326,  384,  471,  323,  359,  374,
 /*   300 */   470,  418,  416,  447,  448,  449,  433,  432,  459,  461,
 /*   310 */   460,  333,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 108;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 312;
    const YYNRULE = 164;
    const YYERRORSYMBOL = 67;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '<br>';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    public $yyTokenName = array( 
  '$',             'COMMENT',       'PHP',           'OTHER',       
  'SHORTTAGEND',   'SHORTTAGSTART',  'XML',           'LDEL',        
  'RDEL',          'EQUAL',         'ID',            'PTR',         
  'SPACE',         'SEMICOLON',     'DOLLAR',        'INCDEC',      
  'AS',            'LDELSLASH',     'COMMA',         'COLON',       
  'UNIMATH',       'OPENP',         'CLOSEP',        'QMARK',       
  'MATH',          'ANDSYM',        'TYPECAST',      'INTEGER',     
  'DOT',           'BOOLEAN',       'NULL',          'SINGLEQUOTESTRING',
  'QUOTE',         'DOUBLECOLON',   'AT',            'HATCH',       
  'OPENB',         'CLOSEB',        'VERT',          'NOT',         
  'ISIN',          'ISDIVBY',       'ISNOTDIVBY',    'ISEVEN',      
  'ISNOTEVEN',     'ISEVENBY',      'ISNOTEVENBY',   'ISODD',       
  'ISNOTODD',      'ISODDBY',       'ISNOTODDBY',    'INSTANCEOF',  
  'EQUALS',        'NOTEQUALS',     'GREATERTHAN',   'LESSTHAN',    
  'GREATEREQUAL',  'LESSEQUAL',     'IDENTITY',      'NONEIDENTITY',
  'MOD',           'LAND',          'LOR',           'LXOR',        
  'APTR',          'BACKTICK',      'DOLLARID',      'error',       
  'start',         'template',      'template_element',  'smartytag',   
  'variable',      'attributes',    'expr',          'ternary',     
  'varindexed',    'modifier',      'modparameters',  'ifexprs',     
  'statement',     'statements',    'optspace',      'varvar',      
  'foraction',     'value',         'array',         'attribute',   
  'exprs',         'math',          'function',      'doublequoted',
  'method',        'params',        'objectchain',   'arrayindex',  
  'object',        'indexdef',      'varvarele',     'objectelement',
  'modparameter',  'ifexpr',        'ifcond',        'lop',         
  'arrayelements',  'arrayelement',  'doublequotedcontent',
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "start ::= template",
 /*   1 */ "template ::= template_element",
 /*   2 */ "template ::= template template_element",
 /*   3 */ "template_element ::= smartytag",
 /*   4 */ "template_element ::= COMMENT",
 /*   5 */ "template_element ::= PHP OTHER SHORTTAGEND",
 /*   6 */ "template_element ::= SHORTTAGSTART OTHER SHORTTAGEND",
 /*   7 */ "template_element ::= XML",
 /*   8 */ "template_element ::= SHORTTAGEND",
 /*   9 */ "template_element ::= OTHER",
 /*  10 */ "smartytag ::= LDEL variable attributes RDEL",
 /*  11 */ "smartytag ::= LDEL expr attributes RDEL",
 /*  12 */ "smartytag ::= LDEL ternary attributes RDEL",
 /*  13 */ "smartytag ::= LDEL varindexed EQUAL expr attributes RDEL",
 /*  14 */ "smartytag ::= LDEL varindexed EQUAL ternary attributes RDEL",
 /*  15 */ "smartytag ::= LDEL ID attributes RDEL",
 /*  16 */ "smartytag ::= LDEL ID RDEL",
 /*  17 */ "smartytag ::= LDEL ID PTR ID attributes RDEL",
 /*  18 */ "smartytag ::= LDEL ID modifier modparameters attributes RDEL",
 /*  19 */ "smartytag ::= LDEL ID PTR ID modifier modparameters attributes RDEL",
 /*  20 */ "smartytag ::= LDEL ID SPACE ifexprs RDEL",
 /*  21 */ "smartytag ::= LDEL ID SPACE statement RDEL",
 /*  22 */ "smartytag ::= LDEL ID SPACE statements SEMICOLON optspace ifexprs SEMICOLON optspace DOLLAR varvar foraction RDEL",
 /*  23 */ "foraction ::= EQUAL expr",
 /*  24 */ "foraction ::= INCDEC",
 /*  25 */ "smartytag ::= LDEL ID SPACE value AS DOLLAR varvar RDEL",
 /*  26 */ "smartytag ::= LDEL ID SPACE array AS DOLLAR varvar RDEL",
 /*  27 */ "smartytag ::= LDELSLASH ID attributes RDEL",
 /*  28 */ "smartytag ::= LDELSLASH ID modifier modparameters attributes RDEL",
 /*  29 */ "smartytag ::= LDELSLASH ID PTR ID RDEL",
 /*  30 */ "attributes ::= attributes attribute",
 /*  31 */ "attributes ::= attribute",
 /*  32 */ "attributes ::=",
 /*  33 */ "attribute ::= SPACE ID EQUAL expr",
 /*  34 */ "attribute ::= SPACE ID EQUAL value",
 /*  35 */ "attribute ::= SPACE ID EQUAL ternary",
 /*  36 */ "attribute ::= SPACE ID",
 /*  37 */ "statements ::= statement",
 /*  38 */ "statements ::= statements COMMA statement",
 /*  39 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  40 */ "expr ::= ID",
 /*  41 */ "expr ::= exprs",
 /*  42 */ "expr ::= DOLLAR ID COLON ID",
 /*  43 */ "expr ::= expr modifier modparameters",
 /*  44 */ "exprs ::= value",
 /*  45 */ "exprs ::= UNIMATH value",
 /*  46 */ "exprs ::= exprs math value",
 /*  47 */ "exprs ::= array",
 /*  48 */ "ternary ::= OPENP ifexprs CLOSEP QMARK expr COLON expr",
 /*  49 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  50 */ "math ::= UNIMATH",
 /*  51 */ "math ::= MATH",
 /*  52 */ "math ::= ANDSYM",
 /*  53 */ "value ::= variable",
 /*  54 */ "value ::= TYPECAST variable",
 /*  55 */ "value ::= variable INCDEC",
 /*  56 */ "value ::= INTEGER",
 /*  57 */ "value ::= INTEGER DOT INTEGER",
 /*  58 */ "value ::= BOOLEAN",
 /*  59 */ "value ::= NULL",
 /*  60 */ "value ::= function",
 /*  61 */ "value ::= OPENP expr CLOSEP",
 /*  62 */ "value ::= SINGLEQUOTESTRING",
 /*  63 */ "value ::= QUOTE doublequoted QUOTE",
 /*  64 */ "value ::= QUOTE QUOTE",
 /*  65 */ "value ::= ID DOUBLECOLON method",
 /*  66 */ "value ::= ID DOUBLECOLON DOLLAR ID OPENP params CLOSEP",
 /*  67 */ "value ::= ID DOUBLECOLON method objectchain",
 /*  68 */ "value ::= ID DOUBLECOLON DOLLAR ID OPENP params CLOSEP objectchain",
 /*  69 */ "value ::= ID DOUBLECOLON ID",
 /*  70 */ "value ::= ID DOUBLECOLON DOLLAR ID arrayindex",
 /*  71 */ "value ::= ID DOUBLECOLON DOLLAR ID arrayindex objectchain",
 /*  72 */ "value ::= smartytag",
 /*  73 */ "variable ::= varindexed",
 /*  74 */ "variable ::= DOLLAR varvar AT ID",
 /*  75 */ "variable ::= object",
 /*  76 */ "variable ::= HATCH ID HATCH",
 /*  77 */ "variable ::= HATCH variable HATCH",
 /*  78 */ "varindexed ::= DOLLAR varvar arrayindex",
 /*  79 */ "arrayindex ::= arrayindex indexdef",
 /*  80 */ "arrayindex ::=",
 /*  81 */ "indexdef ::= DOT ID",
 /*  82 */ "indexdef ::= DOT BOOLEAN",
 /*  83 */ "indexdef ::= DOT NULL",
 /*  84 */ "indexdef ::= DOT INTEGER",
 /*  85 */ "indexdef ::= DOT INTEGER ID",
 /*  86 */ "indexdef ::= DOT variable",
 /*  87 */ "indexdef ::= DOT LDEL exprs RDEL",
 /*  88 */ "indexdef ::= OPENB ID CLOSEB",
 /*  89 */ "indexdef ::= OPENB ID DOT ID CLOSEB",
 /*  90 */ "indexdef ::= OPENB exprs CLOSEB",
 /*  91 */ "indexdef ::= OPENB CLOSEB",
 /*  92 */ "varvar ::= varvarele",
 /*  93 */ "varvar ::= varvar varvarele",
 /*  94 */ "varvarele ::= ID",
 /*  95 */ "varvarele ::= LDEL expr RDEL",
 /*  96 */ "object ::= varindexed objectchain",
 /*  97 */ "objectchain ::= objectelement",
 /*  98 */ "objectchain ::= objectchain objectelement",
 /*  99 */ "objectelement ::= PTR ID arrayindex",
 /* 100 */ "objectelement ::= PTR variable arrayindex",
 /* 101 */ "objectelement ::= PTR LDEL expr RDEL arrayindex",
 /* 102 */ "objectelement ::= PTR ID LDEL expr RDEL arrayindex",
 /* 103 */ "objectelement ::= PTR method",
 /* 104 */ "function ::= ID OPENP params CLOSEP",
 /* 105 */ "method ::= ID OPENP params CLOSEP",
 /* 106 */ "params ::= expr COMMA params",
 /* 107 */ "params ::= expr",
 /* 108 */ "params ::=",
 /* 109 */ "modifier ::= VERT AT ID",
 /* 110 */ "modifier ::= VERT ID",
 /* 111 */ "modparameters ::= modparameters modparameter",
 /* 112 */ "modparameters ::=",
 /* 113 */ "modparameter ::= COLON exprs",
 /* 114 */ "modparameter ::= COLON ID",
 /* 115 */ "ifexprs ::= ifexpr",
 /* 116 */ "ifexprs ::= NOT ifexprs",
 /* 117 */ "ifexprs ::= OPENP ifexprs CLOSEP",
 /* 118 */ "ifexpr ::= expr",
 /* 119 */ "ifexpr ::= expr ifcond expr",
 /* 120 */ "ifexpr ::= expr ISIN array",
 /* 121 */ "ifexpr ::= expr ISIN value",
 /* 122 */ "ifexpr ::= ifexprs lop ifexprs",
 /* 123 */ "ifexpr ::= ifexprs ISDIVBY ifexprs",
 /* 124 */ "ifexpr ::= ifexprs ISNOTDIVBY ifexprs",
 /* 125 */ "ifexpr ::= ifexprs ISEVEN",
 /* 126 */ "ifexpr ::= ifexprs ISNOTEVEN",
 /* 127 */ "ifexpr ::= ifexprs ISEVENBY ifexprs",
 /* 128 */ "ifexpr ::= ifexprs ISNOTEVENBY ifexprs",
 /* 129 */ "ifexpr ::= ifexprs ISODD",
 /* 130 */ "ifexpr ::= ifexprs ISNOTODD",
 /* 131 */ "ifexpr ::= ifexprs ISODDBY ifexprs",
 /* 132 */ "ifexpr ::= ifexprs ISNOTODDBY ifexprs",
 /* 133 */ "ifexpr ::= value INSTANCEOF ID",
 /* 134 */ "ifexpr ::= value INSTANCEOF value",
 /* 135 */ "ifcond ::= EQUALS",
 /* 136 */ "ifcond ::= NOTEQUALS",
 /* 137 */ "ifcond ::= GREATERTHAN",
 /* 138 */ "ifcond ::= LESSTHAN",
 /* 139 */ "ifcond ::= GREATEREQUAL",
 /* 140 */ "ifcond ::= LESSEQUAL",
 /* 141 */ "ifcond ::= IDENTITY",
 /* 142 */ "ifcond ::= NONEIDENTITY",
 /* 143 */ "ifcond ::= MOD",
 /* 144 */ "lop ::= LAND",
 /* 145 */ "lop ::= LOR",
 /* 146 */ "lop ::= LXOR",
 /* 147 */ "array ::= OPENB arrayelements CLOSEB",
 /* 148 */ "arrayelements ::= arrayelement",
 /* 149 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 150 */ "arrayelements ::=",
 /* 151 */ "arrayelement ::= expr APTR expr",
 /* 152 */ "arrayelement ::= ID APTR expr",
 /* 153 */ "arrayelement ::= expr",
 /* 154 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 155 */ "doublequoted ::= doublequotedcontent",
 /* 156 */ "doublequotedcontent ::= BACKTICK variable BACKTICK",
 /* 157 */ "doublequotedcontent ::= DOLLARID",
 /* 158 */ "doublequotedcontent ::= LDEL variable RDEL",
 /* 159 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 160 */ "doublequotedcontent ::= smartytag",
 /* 161 */ "doublequotedcontent ::= OTHER",
 /* 162 */ "optspace ::= SPACE",
 /* 163 */ "optspace ::=",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param TP_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 68, 'rhs' => 1 ),
  array( 'lhs' => 69, 'rhs' => 1 ),
  array( 'lhs' => 69, 'rhs' => 2 ),
  array( 'lhs' => 70, 'rhs' => 1 ),
  array( 'lhs' => 70, 'rhs' => 1 ),
  array( 'lhs' => 70, 'rhs' => 3 ),
  array( 'lhs' => 70, 'rhs' => 3 ),
  array( 'lhs' => 70, 'rhs' => 1 ),
  array( 'lhs' => 70, 'rhs' => 1 ),
  array( 'lhs' => 70, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 4 ),
  array( 'lhs' => 71, 'rhs' => 4 ),
  array( 'lhs' => 71, 'rhs' => 4 ),
  array( 'lhs' => 71, 'rhs' => 6 ),
  array( 'lhs' => 71, 'rhs' => 6 ),
  array( 'lhs' => 71, 'rhs' => 4 ),
  array( 'lhs' => 71, 'rhs' => 3 ),
  array( 'lhs' => 71, 'rhs' => 6 ),
  array( 'lhs' => 71, 'rhs' => 6 ),
  array( 'lhs' => 71, 'rhs' => 8 ),
  array( 'lhs' => 71, 'rhs' => 5 ),
  array( 'lhs' => 71, 'rhs' => 5 ),
  array( 'lhs' => 71, 'rhs' => 13 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 71, 'rhs' => 8 ),
  array( 'lhs' => 71, 'rhs' => 8 ),
  array( 'lhs' => 71, 'rhs' => 4 ),
  array( 'lhs' => 71, 'rhs' => 6 ),
  array( 'lhs' => 71, 'rhs' => 5 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 0 ),
  array( 'lhs' => 87, 'rhs' => 4 ),
  array( 'lhs' => 87, 'rhs' => 4 ),
  array( 'lhs' => 87, 'rhs' => 4 ),
  array( 'lhs' => 87, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 7 ),
  array( 'lhs' => 75, 'rhs' => 7 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 7 ),
  array( 'lhs' => 85, 'rhs' => 4 ),
  array( 'lhs' => 85, 'rhs' => 8 ),
  array( 'lhs' => 85, 'rhs' => 3 ),
  array( 'lhs' => 85, 'rhs' => 5 ),
  array( 'lhs' => 85, 'rhs' => 6 ),
  array( 'lhs' => 85, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 4 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 72, 'rhs' => 3 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 2 ),
  array( 'lhs' => 95, 'rhs' => 0 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 4 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 5 ),
  array( 'lhs' => 97, 'rhs' => 3 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 83, 'rhs' => 2 ),
  array( 'lhs' => 98, 'rhs' => 1 ),
  array( 'lhs' => 98, 'rhs' => 3 ),
  array( 'lhs' => 96, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 99, 'rhs' => 5 ),
  array( 'lhs' => 99, 'rhs' => 6 ),
  array( 'lhs' => 99, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 93, 'rhs' => 3 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 0 ),
  array( 'lhs' => 77, 'rhs' => 3 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 0 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 1 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 102, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 103, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 1 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 104, 'rhs' => 0 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 3 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 106, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 0 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        44 => 0,
        53 => 0,
        56 => 0,
        58 => 0,
        59 => 0,
        60 => 0,
        62 => 0,
        75 => 0,
        148 => 0,
        1 => 1,
        41 => 1,
        47 => 1,
        50 => 1,
        51 => 1,
        92 => 1,
        115 => 1,
        155 => 1,
        161 => 1,
        162 => 1,
        2 => 2,
        111 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 10,
        12 => 10,
        13 => 13,
        14 => 13,
        15 => 15,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        31 => 24,
        107 => 24,
        153 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        32 => 32,
        33 => 33,
        34 => 33,
        35 => 33,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        42 => 42,
        43 => 43,
        45 => 45,
        54 => 45,
        55 => 45,
        46 => 46,
        48 => 48,
        49 => 48,
        52 => 52,
        57 => 57,
        61 => 61,
        63 => 63,
        64 => 64,
        65 => 65,
        66 => 66,
        67 => 67,
        68 => 68,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        76 => 76,
        77 => 77,
        78 => 78,
        79 => 79,
        154 => 79,
        80 => 80,
        112 => 80,
        81 => 81,
        82 => 81,
        83 => 81,
        84 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        90 => 87,
        88 => 88,
        89 => 89,
        91 => 91,
        163 => 91,
        93 => 93,
        94 => 94,
        95 => 95,
        117 => 95,
        96 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        108 => 108,
        109 => 109,
        110 => 110,
        113 => 113,
        114 => 114,
        116 => 116,
        118 => 118,
        119 => 119,
        122 => 119,
        133 => 119,
        120 => 120,
        121 => 121,
        123 => 123,
        124 => 124,
        125 => 125,
        130 => 125,
        126 => 126,
        129 => 126,
        127 => 127,
        132 => 127,
        128 => 128,
        131 => 128,
        134 => 134,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        156 => 156,
        158 => 156,
        157 => 157,
        159 => 159,
        160 => 160,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 79 "smarty_internal_templateparser.y"
    function yy_r0(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1960 "smarty_internal_templateparser.php"
#line 85 "smarty_internal_templateparser.y"
    function yy_r1(){$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;    }
#line 1963 "smarty_internal_templateparser.php"
#line 87 "smarty_internal_templateparser.y"
    function yy_r2(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 1966 "smarty_internal_templateparser.php"
#line 93 "smarty_internal_templateparser.y"
    function yy_r3(){
                                          if ($this->compiler->has_code) {
                                            $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
                                            $this->_retvalue = $this->cacher->processNocacheCode($tmp.$this->yystack[$this->yyidx + 0]->minor, $this->compiler,true);
                                         } else { $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;}  $this->compiler->has_variable_string = false;    }
#line 1973 "smarty_internal_templateparser.php"
#line 100 "smarty_internal_templateparser.y"
    function yy_r4(){ $this->_retvalue = '';    }
#line 1976 "smarty_internal_templateparser.php"
#line 105 "smarty_internal_templateparser.y"
    function yy_r5(){if ($this->sec_obj->php_handling == SMARTY_PHP_PASSTHRU) {
                                       $this->_retvalue = $this->cacher->processNocacheCode("<?php echo htmlspecialchars('<?php".str_replace("'","\'",$this->yystack[$this->yyidx + -1]->minor)."?>', ENT_QUOTES);?>\n", $this->compiler, false);
                                      } elseif ($this->sec_obj->php_handling == SMARTY_PHP_QUOTE) {
                                       $this->_retvalue = $this->cacher->processNocacheCode(htmlspecialchars('<?php'.$this->yystack[$this->yyidx + -1]->minor.'?>', ENT_QUOTES), $this->compiler, false);
                                      }elseif ($this->sec_obj->php_handling == SMARTY_PHP_ALLOW) {
                                       $this->_retvalue = $this->cacher->processNocacheCode('<?php'.$this->yystack[$this->yyidx + -1]->minor.'?>', $this->compiler, true);
                                      }elseif ($this->sec_obj->php_handling == SMARTY_PHP_REMOVE) {
                                       $this->_retvalue = '';
                                      }
                                         }
#line 1988 "smarty_internal_templateparser.php"
#line 116 "smarty_internal_templateparser.y"
    function yy_r6(){ 
                                      if ($this->sec_obj->php_handling == SMARTY_PHP_PASSTHRU || $this->sec_obj->php_handling == SMARTY_PHP_ALLOW) {
                                       $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '<?=".$this->yystack[$this->yyidx + -1]->minor."?>'?>\n", $this->compiler, false);
                                      } elseif ($this->sec_obj->php_handling == SMARTY_PHP_QUOTE) {
                                       $this->_retvalue = $this->cacher->processNocacheCode(htmlspecialchars('<?='.$this->yystack[$this->yyidx + -1]->minor.'?>', ENT_QUOTES), $this->compiler, false);
                                      }elseif ($this->sec_obj == SMARTY_PHP_REMOVE) {
                                       $this->_retvalue = '';
                                      }
                                         }
#line 1999 "smarty_internal_templateparser.php"
#line 127 "smarty_internal_templateparser.y"
    function yy_r7(){ $this->compiler->tag_nocache = true; $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '<?xml';?>", $this->compiler, true);    }
#line 2002 "smarty_internal_templateparser.php"
#line 128 "smarty_internal_templateparser.y"
    function yy_r8(){$this->compiler->tag_nocache = true; $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '?>';?>\n", $this->compiler, true);    }
#line 2005 "smarty_internal_templateparser.php"
#line 130 "smarty_internal_templateparser.y"
    function yy_r9(){$this->_retvalue = $this->cacher->processNocacheCode($this->yystack[$this->yyidx + 0]->minor, $this->compiler,false);    }
#line 2008 "smarty_internal_templateparser.php"
#line 137 "smarty_internal_templateparser.y"
    function yy_r10(){ $this->_retvalue = $this->compiler->compileTag('print_expression',array_merge(array('value'=>$this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor));    }
#line 2011 "smarty_internal_templateparser.php"
#line 147 "smarty_internal_templateparser.y"
    function yy_r13(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array('value'=>$this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -1]->minor));    }
#line 2014 "smarty_internal_templateparser.php"
#line 150 "smarty_internal_templateparser.y"
    function yy_r15(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + -1]->minor);    }
#line 2017 "smarty_internal_templateparser.php"
#line 151 "smarty_internal_templateparser.y"
    function yy_r16(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,array());    }
#line 2020 "smarty_internal_templateparser.php"
#line 153 "smarty_internal_templateparser.y"
    function yy_r17(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,array_merge(array('object_methode'=>$this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor));    }
#line 2023 "smarty_internal_templateparser.php"
#line 155 "smarty_internal_templateparser.y"
    function yy_r18(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + -1]->minor).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -3]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -3]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -3]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -3]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2038 "smarty_internal_templateparser.php"
#line 169 "smarty_internal_templateparser.y"
    function yy_r19(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -6]->minor,array_merge(array('object_methode'=>$this->yystack[$this->yyidx + -4]->minor),$this->yystack[$this->yyidx + -1]->minor)).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -3]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -3]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -3]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -3]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2053 "smarty_internal_templateparser.php"
#line 183 "smarty_internal_templateparser.y"
    function yy_r20(){if (!in_array($this->yystack[$this->yyidx + -3]->minor,array('if','elseif','while'))) {
                                                            $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -3]->minor . "\""); 
                                                            }
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2059 "smarty_internal_templateparser.php"
#line 187 "smarty_internal_templateparser.y"
    function yy_r21(){ if (!in_array($this->yystack[$this->yyidx + -3]->minor,array('if','elseif','while'))) {
                                                            $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -3]->minor . "\""); 
                                                            }
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2065 "smarty_internal_templateparser.php"
#line 192 "smarty_internal_templateparser.y"
    function yy_r22(){
                                                            if ($this->yystack[$this->yyidx + -11]->minor != 'for') {
                                                               $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -11]->minor . "\""); 
                                                            }
                                                             $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -11]->minor,array('start'=>$this->yystack[$this->yyidx + -9]->minor,'ifexp'=>$this->yystack[$this->yyidx + -6]->minor,'varloop'=>$this->yystack[$this->yyidx + -2]->minor,'loop'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2072 "smarty_internal_templateparser.php"
#line 197 "smarty_internal_templateparser.y"
    function yy_r23(){ $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2075 "smarty_internal_templateparser.php"
#line 198 "smarty_internal_templateparser.y"
    function yy_r24(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;    }
#line 2078 "smarty_internal_templateparser.php"
#line 200 "smarty_internal_templateparser.y"
    function yy_r25(){
                                                            if ($this->yystack[$this->yyidx + -6]->minor != 'foreach') {
                                                               $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -6]->minor . "\""); 
                                                            }
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -6]->minor,array('from'=>$this->yystack[$this->yyidx + -4]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2085 "smarty_internal_templateparser.php"
#line 205 "smarty_internal_templateparser.y"
    function yy_r26(){ 
                                                            if ($this->yystack[$this->yyidx + -6]->minor != 'foreach') {
                                                               $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -6]->minor . "\""); 
                                                            }
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -6]->minor,array('from'=>$this->yystack[$this->yyidx + -4]->minor,'item'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2092 "smarty_internal_templateparser.php"
#line 212 "smarty_internal_templateparser.y"
    function yy_r27(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor.'close',$this->yystack[$this->yyidx + -1]->minor);    }
#line 2095 "smarty_internal_templateparser.php"
#line 213 "smarty_internal_templateparser.y"
    function yy_r28(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor.'close',$this->yystack[$this->yyidx + -1]->minor).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -3]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -3]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -3]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -3]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -2]->minor. "),".$this->yystack[$this->yyidx + -3]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -3]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2110 "smarty_internal_templateparser.php"
#line 227 "smarty_internal_templateparser.y"
    function yy_r29(){  $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor.'close',array('object_methode'=>$this->yystack[$this->yyidx + -1]->minor));    }
#line 2113 "smarty_internal_templateparser.php"
#line 234 "smarty_internal_templateparser.y"
    function yy_r30(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);    }
#line 2116 "smarty_internal_templateparser.php"
#line 238 "smarty_internal_templateparser.y"
    function yy_r32(){ $this->_retvalue = array();    }
#line 2119 "smarty_internal_templateparser.php"
#line 241 "smarty_internal_templateparser.y"
    function yy_r33(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2122 "smarty_internal_templateparser.php"
#line 244 "smarty_internal_templateparser.y"
    function yy_r36(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor=>'true');    }
#line 2125 "smarty_internal_templateparser.php"
#line 250 "smarty_internal_templateparser.y"
    function yy_r37(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);    }
#line 2128 "smarty_internal_templateparser.php"
#line 251 "smarty_internal_templateparser.y"
    function yy_r38(){ $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;    }
#line 2131 "smarty_internal_templateparser.php"
#line 253 "smarty_internal_templateparser.y"
    function yy_r39(){ $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2134 "smarty_internal_templateparser.php"
#line 259 "smarty_internal_templateparser.y"
    function yy_r40(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';     }
#line 2137 "smarty_internal_templateparser.php"
#line 262 "smarty_internal_templateparser.y"
    function yy_r42(){$this->_retvalue = '$_smarty_tpl->getStreamVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'://'. $this->yystack[$this->yyidx + 0]->minor . '\')';    }
#line 2140 "smarty_internal_templateparser.php"
#line 263 "smarty_internal_templateparser.y"
    function yy_r43(){            
                                                            if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -1]->minor[0],'modifier')) {
                                                                      $this->_retvalue = "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -1]->minor[0] . "',array(". $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor. "),".$this->yystack[$this->yyidx + -1]->minor[1].")";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -1]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -1]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue = "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -1]->minor[0] . "',array(". $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor. "),".$this->yystack[$this->yyidx + -1]->minor[1].")";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -1]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                }
#line 2155 "smarty_internal_templateparser.php"
#line 280 "smarty_internal_templateparser.y"
    function yy_r45(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2158 "smarty_internal_templateparser.php"
#line 282 "smarty_internal_templateparser.y"
    function yy_r46(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;     }
#line 2161 "smarty_internal_templateparser.php"
#line 289 "smarty_internal_templateparser.y"
    function yy_r48(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2164 "smarty_internal_templateparser.php"
#line 303 "smarty_internal_templateparser.y"
    function yy_r52(){$this->_retvalue = ' & ';    }
#line 2167 "smarty_internal_templateparser.php"
#line 311 "smarty_internal_templateparser.y"
    function yy_r57(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2170 "smarty_internal_templateparser.php"
#line 319 "smarty_internal_templateparser.y"
    function yy_r61(){ $this->_retvalue = "(". $this->yystack[$this->yyidx + -1]->minor .")";     }
#line 2173 "smarty_internal_templateparser.php"
#line 323 "smarty_internal_templateparser.y"
    function yy_r63(){ $this->_retvalue = str_replace(array('."".','"".','.""'),array('.','',''),'"'.$this->yystack[$this->yyidx + -1]->minor.'"');     }
#line 2176 "smarty_internal_templateparser.php"
#line 324 "smarty_internal_templateparser.y"
    function yy_r64(){ $this->_retvalue = "''";     }
#line 2179 "smarty_internal_templateparser.php"
#line 326 "smarty_internal_templateparser.y"
    function yy_r65(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2182 "smarty_internal_templateparser.php"
#line 327 "smarty_internal_templateparser.y"
    function yy_r66(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'=$_smarty_tpl->getVariable(\''. $this->yystack[$this->yyidx + -3]->minor .'\')->value;?>'; $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.'::$_tmp'.$this->prefix_number.'('. $this->yystack[$this->yyidx + -1]->minor .')';     }
#line 2185 "smarty_internal_templateparser.php"
#line 329 "smarty_internal_templateparser.y"
    function yy_r67(){ $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor.'::'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2188 "smarty_internal_templateparser.php"
#line 330 "smarty_internal_templateparser.y"
    function yy_r68(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'=$_smarty_tpl->getVariable(\''. $this->yystack[$this->yyidx + -4]->minor .'\')->value;?>'; $this->_retvalue = $this->yystack[$this->yyidx + -7]->minor.'::$_tmp'.$this->prefix_number.'('. $this->yystack[$this->yyidx + -2]->minor .')'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2191 "smarty_internal_templateparser.php"
#line 332 "smarty_internal_templateparser.y"
    function yy_r69(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2194 "smarty_internal_templateparser.php"
#line 334 "smarty_internal_templateparser.y"
    function yy_r70(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor.'::$'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2197 "smarty_internal_templateparser.php"
#line 336 "smarty_internal_templateparser.y"
    function yy_r71(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.'::$'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2200 "smarty_internal_templateparser.php"
#line 338 "smarty_internal_templateparser.y"
    function yy_r72(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + 0]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '$_tmp'.$this->prefix_number;     }
#line 2203 "smarty_internal_templateparser.php"
#line 347 "smarty_internal_templateparser.y"
    function yy_r73(){if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') { $this->_retvalue =  $this->compiler->compileTag('special_smarty_variable',$this->yystack[$this->yyidx + 0]->minor['index']);} else {
                                                         $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + 0]->minor['var'] .')->value'.$this->yystack[$this->yyidx + 0]->minor['index']; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + 0]->minor['var'],"'"))->nocache;}    }
#line 2207 "smarty_internal_templateparser.php"
#line 350 "smarty_internal_templateparser.y"
    function yy_r74(){ $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + -2]->minor .')->'.$this->yystack[$this->yyidx + 0]->minor; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + -2]->minor,"'"))->nocache;    }
#line 2210 "smarty_internal_templateparser.php"
#line 354 "smarty_internal_templateparser.y"
    function yy_r76(){$this->_retvalue = '$_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -1]->minor .'\')';    }
#line 2213 "smarty_internal_templateparser.php"
#line 355 "smarty_internal_templateparser.y"
    function yy_r77(){$this->_retvalue = '$_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -1]->minor .')';    }
#line 2216 "smarty_internal_templateparser.php"
#line 358 "smarty_internal_templateparser.y"
    function yy_r78(){$this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'index'=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2219 "smarty_internal_templateparser.php"
#line 364 "smarty_internal_templateparser.y"
    function yy_r79(){$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2222 "smarty_internal_templateparser.php"
#line 366 "smarty_internal_templateparser.y"
    function yy_r80(){return;    }
#line 2225 "smarty_internal_templateparser.php"
#line 370 "smarty_internal_templateparser.y"
    function yy_r81(){ $this->_retvalue = "['". $this->yystack[$this->yyidx + 0]->minor ."']";    }
#line 2228 "smarty_internal_templateparser.php"
#line 373 "smarty_internal_templateparser.y"
    function yy_r84(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + 0]->minor ."]";    }
#line 2231 "smarty_internal_templateparser.php"
#line 374 "smarty_internal_templateparser.y"
    function yy_r85(){ $this->_retvalue = "['". $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor ."']";    }
#line 2234 "smarty_internal_templateparser.php"
#line 375 "smarty_internal_templateparser.y"
    function yy_r86(){ $this->_retvalue = "[".$this->yystack[$this->yyidx + 0]->minor."]";    }
#line 2237 "smarty_internal_templateparser.php"
#line 376 "smarty_internal_templateparser.y"
    function yy_r87(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + -1]->minor ."]";    }
#line 2240 "smarty_internal_templateparser.php"
#line 378 "smarty_internal_templateparser.y"
    function yy_r88(){ $this->_retvalue = '['.$this->compiler->compileTag('special_smarty_variable','[\'section\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\'][\'index\']').']';    }
#line 2243 "smarty_internal_templateparser.php"
#line 379 "smarty_internal_templateparser.y"
    function yy_r89(){ $this->_retvalue = '['.$this->compiler->compileTag('special_smarty_variable','[\'section\'][\''.$this->yystack[$this->yyidx + -3]->minor.'\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\']').']';    }
#line 2246 "smarty_internal_templateparser.php"
#line 383 "smarty_internal_templateparser.y"
    function yy_r91(){$this->_retvalue = '';    }
#line 2249 "smarty_internal_templateparser.php"
#line 391 "smarty_internal_templateparser.y"
    function yy_r93(){$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2252 "smarty_internal_templateparser.php"
#line 393 "smarty_internal_templateparser.y"
    function yy_r94(){$this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';    }
#line 2255 "smarty_internal_templateparser.php"
#line 395 "smarty_internal_templateparser.y"
    function yy_r95(){$this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2258 "smarty_internal_templateparser.php"
#line 400 "smarty_internal_templateparser.y"
    function yy_r96(){ if ($this->yystack[$this->yyidx + -1]->minor['var'] == '\'smarty\'') { $this->_retvalue =  $this->compiler->compileTag('special_smarty_variable',$this->yystack[$this->yyidx + -1]->minor['index']).$this->yystack[$this->yyidx + 0]->minor;} else {
                                                         $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + -1]->minor['var'] .')->value'.$this->yystack[$this->yyidx + -1]->minor['index'].$this->yystack[$this->yyidx + 0]->minor; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + -1]->minor['var'],"'"))->nocache;}    }
#line 2262 "smarty_internal_templateparser.php"
#line 403 "smarty_internal_templateparser.y"
    function yy_r97(){$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2265 "smarty_internal_templateparser.php"
#line 405 "smarty_internal_templateparser.y"
    function yy_r98(){$this->_retvalue  = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2268 "smarty_internal_templateparser.php"
#line 407 "smarty_internal_templateparser.y"
    function yy_r99(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2271 "smarty_internal_templateparser.php"
#line 408 "smarty_internal_templateparser.y"
    function yy_r100(){ $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2274 "smarty_internal_templateparser.php"
#line 409 "smarty_internal_templateparser.y"
    function yy_r101(){ $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2277 "smarty_internal_templateparser.php"
#line 410 "smarty_internal_templateparser.y"
    function yy_r102(){ $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2280 "smarty_internal_templateparser.php"
#line 412 "smarty_internal_templateparser.y"
    function yy_r103(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2283 "smarty_internal_templateparser.php"
#line 418 "smarty_internal_templateparser.y"
    function yy_r104(){if (!$this->template->security || $this->smarty->security_handler->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
																					            if ($this->yystack[$this->yyidx + -3]->minor == 'isset' || $this->yystack[$this->yyidx + -3]->minor == 'empty' || $this->yystack[$this->yyidx + -3]->minor == 'array' || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
																					                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $this->yystack[$this->yyidx + -1]->minor .")";
																					            } else {
                                                       $this->compiler->trigger_template_error ("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
                                                      }
                                                    }    }
#line 2292 "smarty_internal_templateparser.php"
#line 429 "smarty_internal_templateparser.y"
    function yy_r105(){ $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $this->yystack[$this->yyidx + -1]->minor .")";    }
#line 2295 "smarty_internal_templateparser.php"
#line 433 "smarty_internal_templateparser.y"
    function yy_r106(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.",".$this->yystack[$this->yyidx + 0]->minor;    }
#line 2298 "smarty_internal_templateparser.php"
#line 437 "smarty_internal_templateparser.y"
    function yy_r108(){ return;    }
#line 2301 "smarty_internal_templateparser.php"
#line 442 "smarty_internal_templateparser.y"
    function yy_r109(){ $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor,'false');    }
#line 2304 "smarty_internal_templateparser.php"
#line 443 "smarty_internal_templateparser.y"
    function yy_r110(){ $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor,'true');    }
#line 2307 "smarty_internal_templateparser.php"
#line 459 "smarty_internal_templateparser.y"
    function yy_r113(){$this->_retvalue = ','.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2310 "smarty_internal_templateparser.php"
#line 460 "smarty_internal_templateparser.y"
    function yy_r114(){$this->_retvalue = ',\''.$this->yystack[$this->yyidx + 0]->minor.'\'';    }
#line 2313 "smarty_internal_templateparser.php"
#line 467 "smarty_internal_templateparser.y"
    function yy_r116(){$this->_retvalue = '!'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2316 "smarty_internal_templateparser.php"
#line 472 "smarty_internal_templateparser.y"
    function yy_r118(){$this->_retvalue =$this->yystack[$this->yyidx + 0]->minor;    }
#line 2319 "smarty_internal_templateparser.php"
#line 474 "smarty_internal_templateparser.y"
    function yy_r119(){$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2322 "smarty_internal_templateparser.php"
#line 475 "smarty_internal_templateparser.y"
    function yy_r120(){$this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2325 "smarty_internal_templateparser.php"
#line 476 "smarty_internal_templateparser.y"
    function yy_r121(){$this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2328 "smarty_internal_templateparser.php"
#line 478 "smarty_internal_templateparser.y"
    function yy_r123(){$this->_retvalue = '!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2331 "smarty_internal_templateparser.php"
#line 479 "smarty_internal_templateparser.y"
    function yy_r124(){$this->_retvalue = '('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2334 "smarty_internal_templateparser.php"
#line 480 "smarty_internal_templateparser.y"
    function yy_r125(){$this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2337 "smarty_internal_templateparser.php"
#line 481 "smarty_internal_templateparser.y"
    function yy_r126(){$this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2340 "smarty_internal_templateparser.php"
#line 482 "smarty_internal_templateparser.y"
    function yy_r127(){$this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2343 "smarty_internal_templateparser.php"
#line 483 "smarty_internal_templateparser.y"
    function yy_r128(){$this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2346 "smarty_internal_templateparser.php"
#line 489 "smarty_internal_templateparser.y"
    function yy_r134(){$this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.$this->yystack[$this->yyidx + 0]->minor.';?>'; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.$this->prefix_number;    }
#line 2349 "smarty_internal_templateparser.php"
#line 491 "smarty_internal_templateparser.y"
    function yy_r135(){$this->_retvalue = '==';    }
#line 2352 "smarty_internal_templateparser.php"
#line 492 "smarty_internal_templateparser.y"
    function yy_r136(){$this->_retvalue = '!=';    }
#line 2355 "smarty_internal_templateparser.php"
#line 493 "smarty_internal_templateparser.y"
    function yy_r137(){$this->_retvalue = '>';    }
#line 2358 "smarty_internal_templateparser.php"
#line 494 "smarty_internal_templateparser.y"
    function yy_r138(){$this->_retvalue = '<';    }
#line 2361 "smarty_internal_templateparser.php"
#line 495 "smarty_internal_templateparser.y"
    function yy_r139(){$this->_retvalue = '>=';    }
#line 2364 "smarty_internal_templateparser.php"
#line 496 "smarty_internal_templateparser.y"
    function yy_r140(){$this->_retvalue = '<=';    }
#line 2367 "smarty_internal_templateparser.php"
#line 497 "smarty_internal_templateparser.y"
    function yy_r141(){$this->_retvalue = '===';    }
#line 2370 "smarty_internal_templateparser.php"
#line 498 "smarty_internal_templateparser.y"
    function yy_r142(){$this->_retvalue = '!==';    }
#line 2373 "smarty_internal_templateparser.php"
#line 499 "smarty_internal_templateparser.y"
    function yy_r143(){$this->_retvalue = '%';    }
#line 2376 "smarty_internal_templateparser.php"
#line 501 "smarty_internal_templateparser.y"
    function yy_r144(){$this->_retvalue = '&&';    }
#line 2379 "smarty_internal_templateparser.php"
#line 502 "smarty_internal_templateparser.y"
    function yy_r145(){$this->_retvalue = '||';    }
#line 2382 "smarty_internal_templateparser.php"
#line 503 "smarty_internal_templateparser.y"
    function yy_r146(){$this->_retvalue = ' XOR ';    }
#line 2385 "smarty_internal_templateparser.php"
#line 508 "smarty_internal_templateparser.y"
    function yy_r147(){ $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2388 "smarty_internal_templateparser.php"
#line 510 "smarty_internal_templateparser.y"
    function yy_r149(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2391 "smarty_internal_templateparser.php"
#line 511 "smarty_internal_templateparser.y"
    function yy_r150(){ return;     }
#line 2394 "smarty_internal_templateparser.php"
#line 512 "smarty_internal_templateparser.y"
    function yy_r151(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2397 "smarty_internal_templateparser.php"
#line 513 "smarty_internal_templateparser.y"
    function yy_r152(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2400 "smarty_internal_templateparser.php"
#line 522 "smarty_internal_templateparser.y"
    function yy_r156(){$this->_retvalue = '".'.$this->yystack[$this->yyidx + -1]->minor.'."'; $this->compiler->has_variable_string = true;    }
#line 2403 "smarty_internal_templateparser.php"
#line 523 "smarty_internal_templateparser.y"
    function yy_r157(){$this->_retvalue = '".'.'$_smarty_tpl->getVariable(\''. substr($this->yystack[$this->yyidx + 0]->minor,1) .'\')->value'.'."'; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + 0]->minor,"'"))->nocache; $this->compiler->has_variable_string = true;    }
#line 2406 "smarty_internal_templateparser.php"
#line 525 "smarty_internal_templateparser.y"
    function yy_r159(){ $this->_retvalue = '".('.$this->yystack[$this->yyidx + -1]->minor.')."'; $this->compiler->has_variable_string = true;    }
#line 2409 "smarty_internal_templateparser.php"
#line 526 "smarty_internal_templateparser.y"
    function yy_r160(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + 0]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '".$_tmp'.$this->prefix_number.'."'; $this->compiler->has_variable_string = true;    }
#line 2412 "smarty_internal_templateparser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //TP_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 60 "smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2530 "smarty_internal_templateparser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
#line 52 "smarty_internal_templateparser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
    //echo $this->retvalue."\n\n";
#line 2555 "smarty_internal_templateparser.php"
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int the token number
     * @param mixed the token value
     * @param mixed any extra arguments that should be passed to handlers
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sInput %s\n",
                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(self::$yyTraceFILE, "%sSyntax Error!\n",
                        self::$yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){
                        if (self::$yyTraceFILE) {
                            fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n",
                                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
?>
